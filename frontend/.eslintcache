[{"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/index.js":"1","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/App.js":"2","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Home.component.js":"3","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Navbar.component.js":"4","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignIn.component.js":"5","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignUp.component.js":"6","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Navbar.component.js":"7","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Navbar.component.js":"8","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Profile.component.js":"9","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignUp.page.js":"10","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignIn.page.js":"11","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/Home.page.js":"12","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Profile.component.js":"13","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/NewJob.component.js":"14","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/context/UserContext.js":"15","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Profile.page.js":"16","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Profile.page.js":"17","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/NewJob.page.js":"18","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Dash.component.js":"19","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Search.component.js":"20","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Dash.page.js":"21","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Search.page.js":"22","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Dash.page.js":"23","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Dash.component.js":"24","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Emp.page.js":"25","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Emp.component.js":"26"},{"size":266,"mtime":1611129499941,"results":"27","hashOfConfig":"28"},{"size":2453,"mtime":1611559553522,"results":"29","hashOfConfig":"28"},{"size":2857,"mtime":1611166638672,"results":"30","hashOfConfig":"28"},{"size":680,"mtime":1610977940027,"results":"31","hashOfConfig":"28"},{"size":4362,"mtime":1611337046142,"results":"32","hashOfConfig":"28"},{"size":6984,"mtime":1611341341375,"results":"33","hashOfConfig":"28"},{"size":1192,"mtime":1611152708142,"results":"34","hashOfConfig":"28"},{"size":1236,"mtime":1611504125534,"results":"35","hashOfConfig":"28"},{"size":10846,"mtime":1611494090545,"results":"36","hashOfConfig":"28"},{"size":652,"mtime":1611222772874,"results":"37","hashOfConfig":"28"},{"size":652,"mtime":1611222789282,"results":"38","hashOfConfig":"28"},{"size":653,"mtime":1611222613692,"results":"39","hashOfConfig":"28"},{"size":6460,"mtime":1611310184125,"results":"40","hashOfConfig":"28"},{"size":9594,"mtime":1611335947639,"results":"41","hashOfConfig":"28"},{"size":73,"mtime":1611142853463,"results":"42","hashOfConfig":"28"},{"size":570,"mtime":1611223311182,"results":"43","hashOfConfig":"28"},{"size":570,"mtime":1611238998174,"results":"44","hashOfConfig":"28"},{"size":396,"mtime":1611342733045,"results":"45","hashOfConfig":"28"},{"size":9706,"mtime":1611476114297,"results":"46","hashOfConfig":"28"},{"size":12510,"mtime":1611508145457,"results":"47","hashOfConfig":"28"},{"size":388,"mtime":1611395649838,"results":"48","hashOfConfig":"28"},{"size":394,"mtime":1611395624539,"results":"49","hashOfConfig":"28"},{"size":242,"mtime":1611483446509,"results":"50","hashOfConfig":"28"},{"size":22442,"mtime":1611551207330,"results":"51","hashOfConfig":"28"},{"size":233,"mtime":1611551747660,"results":"52","hashOfConfig":"28"},{"size":3697,"mtime":1611559597766,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1jdjf4c",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/index.js",[],["120","121"],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/App.js",["122"],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Home.component.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Navbar.component.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignIn.component.js",["123"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction SignIn() {\n  const classes = useStyles();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const history = useHistory();\n\n  const {userData, setUserData } = useContext(UserContext);\n\n  const submit = async (e) => {\n    e.preventDefault()\n    const loginRes = await Axios.post(\n      \"http://localhost:5000/user/signin\",\n      {\n        email,\n        password\n      }\n    );\n    setUserData({\n      token: loginRes.data.token,\n      user: loginRes.data.user\n    });\n    console.log(loginRes.data.token)\n    localStorage.setItem(\"auth-token\", loginRes.data.token);\n    history.push(\"/\")\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root} >\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} onSubmit={submit}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n            <span style={{color: \"white\"}}> Sign In </span>\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href=\"/signup\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default SignIn;\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignUp.component.js",["124"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Dropdown } from 'react-bootstrap'\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      height: '100vh',\n    },\n    image: {\n      backgroundImage: 'url(http://images.unsplash.com/photo-1527192491265-7e15c55b1ed2?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)',\n      backgroundRepeat: 'no-repeat',\n      backgroundColor:\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    },\n    paper: {\n      margin: theme.spacing(8, 4),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(1),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [utype, setUType] = useState(\"Applicant\")\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [cpassword, setCPassword] = useState();\n  const [fname, setFname] = useState()\n  const [lname, setLname] = useState()\n  const [cname, setCname] = useState()\n  const history = useHistory();\n\n  const {userData, setUserData} = useContext(UserContext);\n  \n\n  const submit = async (e) => {\n    e.preventDefault();\n    const newUser = {email, password, cpassword, utype, fname, lname, cname};\n    await Axios.post(\n      \"http://localhost:5000/user/signup\",\n      newUser\n    );\n    const loginRes = await Axios.post(\n      \"http://localhost:5000/user/signin\",\n      {\n        email,\n        password,\n      }\n    );\n    setUserData({\n      token: loginRes.data.token,\n      user: loginRes.data.user\n    });\n    localStorage.setItem(\"auth-token\", loginRes.data.token);\n    history.push(\"/\");\n  };\n\n\n  return (\n    <Grid container component=\"main\" className=\"classes.root\" style={{height:\"100vh\"}}>\n    <CssBaseline />\n    <Grid item xs={false} sm={4} md={7} className={classes.image} />\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" size=\"sm\">\n                    {utype}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={()=>{setUType('Applicant')}}>Applicant</Dropdown.Item>\n                    <Dropdown.Item onClick={()=>{setUType('Recruiter')}}>Recruiter</Dropdown.Item>\n                </Dropdown.Menu>\n        </Dropdown>\n        <form className={classes.form} onSubmit={submit}>\n          <Grid container spacing={2}>\n            {\n              (utype===\"Applicant\") ? (\n                <>\n                  <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        label=\"First Name\"\n                        onChange={(e) => setFname(e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        label=\"Last Name\"\n                        onChange={(e) => setLname(e.target.value)}\n                      />\n                    </Grid>\n                </>\n              ): (\n                <>\n                <Grid item xs={12}>\n                  <TextField\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"cName\"\n                    label=\"Company Name\"\n                    onChange={(e) => setCname(e.target.value)}\n                  />\n                </Grid>\n              </>\n              )\n            }\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              \n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"cpassword\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"cpassword\"\n                onChange={(e) => setCPassword(e.target.value)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n          >\n          <span style={{color: \"white\"}}> Sign Up </span>\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/signin\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </form>\n      </div>\n      </Grid>\n    </Grid>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Navbar.component.js",["125"],"import {useContext} from \"react\";\nimport { useHistory} from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\n\n\n\nconst Navbar = () => {\n    const { setUserData }= useContext(UserContext);\n    const history = useHistory();\n\n    const logout = () => {\n        setUserData({\n            token: undefined,\n            user: undefined\n        })\n        localStorage.setItem(\"auth-token\", \"\");\n        history.push(\"/\")\n    }\n    \n    return (  \n        <nav className=\"navbar\">\n            <h1>Work-Way</h1>\n            <div className=\"links\">\n                <a href=\"/applicantdash\">Dashboard</a>\n                <a href=\"/search\">Search Jobs</a>\n                <a href=\"/applicantprofile\" style={{\n                    borderWidth: \"thin\",\n                    borderStyle: \"solid\",\n                    borderColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Edit Profile</a>\n                <a onClick={logout} style={{\n                    color: \"white\",\n                    backgroundColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Sign-Out</a>\n            </div>\n        </nav>\n    );\n}\n \nexport default Navbar;","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Navbar.component.js",["126"],"import {useContext} from \"react\";\nimport { useHistory} from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\n\n\n\nconst Navbar = () => {\n    const { setUserData }= useContext(UserContext);\n    const history = useHistory();\n\n    const logout = () => {\n        setUserData({\n            token: undefined,\n            user: undefined\n        })\n        localStorage.setItem(\"auth-token\", \"\");\n        history.push(\"/\")\n    }\n    return (  \n        <nav className=\"navbar\">\n            <h1>Work-Way</h1>\n            <div className=\"links\">\n                <a href=\"/recruiterdash\">Dashboard</a>\n                <a href=\"/myemp\">My Employees</a>\n                <a href=\"/newjob\">Create Job</a>\n                <a href=\"/recruiterprofile\" style={{\n                    borderWidth: \"thin\",\n                    borderStyle: \"solid\",\n                    borderColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Edit Profile</a>\n                <a onClick={logout} style={{\n                    color: \"white\",\n                    backgroundColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Sign-Out</a>\n            </div>\n        </nav>\n    );\n}\n \nexport default Navbar;","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Profile.component.js",["127","128","129"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [ education, setEducation ] = useState([]);\n  const [ skills, setSkills ] = useState([]);\n  const [fname, setFname] = useState(\"\")\n  const [lname, setLname] = useState(\"\")\n  const [skill, setSkill] = useState(\"\")\n  const [institute, setInstitute] = useState(\"\")\n  const [syear, setSyear] = useState(\"\")\n  const [eyear, setEyear] = useState(\"\")\n  const history = useHistory();\n  \n  const {userData, setUserData } = useContext(UserContext);\n  \n  \n  useEffect( () => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        const recruiterAll = await Axios.get(\"http://localhost:5000/user/getall\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setEducation(recruiterAll.data.education)\n        setSkills(recruiterAll.data.skills)\n        setFname(recruiterAll.data.fname)\n        setLname(recruiterAll.data.lname)\n      }\n    });\n    callData();\n  }, [])\n  \n  const submit = async (e) => {\n    e.preventDefault()\n    const updatedUser = {education, fname, lname, skills};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        console.log(updatedUser)\n        await Axios.post(\"http://localhost:5000/user/update\", updatedUser, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <PersonIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Edit Profile\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> â¢ Basic Info</h3>\n            </Grid>\n            <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                name=\"fName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"fName\"\n                label=\"First Name\"\n                defaultValue={fname}\n                value={fname}\n                onChange={(e) => setFname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lName\"\n                label=\"Last Name\"\n                name=\"lName\"\n                defaultValue={lname}\n                value={lname}\n                onChange={(e) => setLname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                defaultValue={userData?.user?.email || ''}\n                value={userData?.user?.email || ''}\n                InputProps={{\n                    readOnly: true,\n                }}\n              />\n            </Grid>\n            <br />\n            &nbsp;\n            <br/>\n            <Grid container spacing={2}>\n                <h3> â¢ Education</h3>\n            </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {education?.map(item => {\n                let eyear=\"Present\"\n                if (item.eyear!=\"\") eyear=item.eyear\n                return (\n                  <Grid item key={JSON.stringify(item)}>\n                    <Card>\n                      <CardContent>\n                        <h5>{item.institute}</h5>\n                        {item.syear}-{eyear}\n                        <IconButton onClick={() => {\n                          setEducation(education.filter(ed => (ed !== item) ))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                fullWidth\n                id=\"institute\"\n                label=\"Institute\"\n                onChange={(e) => setInstitute(e.target.value)}\n            />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"sYear\"\n                name=\"sYear\"\n                variant=\"outlined\"\n                fullWidth\n                id=\"sYear\"\n                label=\"Start Year\"\n                onChange={(e) => setSyear(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                id=\"eYear\"\n                label=\"End Year\"\n                name=\"eYear\"\n                onChange={(e) => setEyear(e.target.value)}\n              />\n            </Grid>\n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              const item = {institute, syear, eyear}\n              if (!education.filter(ed => JSON.stringify(ed) === JSON.stringify(item)).length && institute !== \"\" && syear != \"\")\n                setEducation([...education, item])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Education </span>\n          </Button>\n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> â¢ Skills</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {skills?.map(item => {\n                return (\n                  <Grid item key={item}>\n                    <Card>\n                      <CardContent>\n                        {item}\n                        <IconButton onClick={() => {\n                          setSkills(skills.filter(sk => sk !== item))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n          &nbsp;\n          <Grid item xs={12}>\n              <Autocomplete\n                freeSolo\n                name=\"skill\"\n                variant=\"outlined\"\n                fullWidth\n                options={[{title: \"Java\"}, {title: \"C++\"}, {title: \"Python\"},]}\n                getOptionLabel={(option) => option.title}\n                label=\"Skill\" \n                inputValue={skill|| ''}\n                onInputChange={(event, value)=>{\n                  setSkill(value)\n                }} \n                renderInput={(params) => <TextField {...params} label=\"Enter new skill\" variant=\"outlined\" />}\n              />\n            </Grid>\n          <Grid item xs={12}>\n          \n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              if (!skills.filter(sk => sk === skill).length && skill !== \"\")\n                setSkills([...skills, skill])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Skills </span>\n          </Button>\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"secondary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    </Grid> \n  );\n}\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignUp.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignIn.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/Home.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Profile.component.js",["130","131"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [cname, setCname] = useState()\n  const [bio, setBio] = useState()\n  const [phone, setPhone] = useState()\n  const history = useHistory()\n\n  const {userData, setUserData } = useContext(UserContext);\n\n  useEffect( () => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        const recruiterAll = await Axios.get(\"http://localhost:5000/user/getall\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setCname(recruiterAll.data.cname)\n        setBio(recruiterAll.data.bio)\n        setPhone(recruiterAll.data.phone)\n      }\n    });\n    callData()\n    console.log(userData)\n\t}, [])\n\n  const submit = async (e) => {\n    e.preventDefault()\n    const updatedUser = {cname, phone, bio};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        console.log(updatedUser)\n        await Axios.post(\"http://localhost:5000/user/update\", updatedUser, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height:\"100vh\"}}>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <PersonIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Edit Profile\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> â¢ Basic Info</h3>\n            </Grid>\n            <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"cName\"\n                label=\"Company Name\"\n                defaultValue={cname}\n                value={cname}\n                onChange={(e) => setCname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                value={userData?.user?.email}\n                InputProps={{\n                    readOnly: true,\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                type=\"number\"\n                id=\"phone\"\n                label=\"Phone\"\n                defaultValue={phone}\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <br />\n            &nbsp;\n            <br/>\n            <Grid container spacing={2}>\n                <h3> â¢ Bio</h3>\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"bio\"\n                label=\"Tell us more (max 250 words)\"\n                defaultValue={bio}\n                value={bio}\n                onChange={(e) => setBio(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n            />\n            </Grid>\n\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    </Grid> \n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/NewJob.component.js",["132","133"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CreateIcon from '@material-ui/icons/Create';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [ skills, setSkills ] = useState([]);\n  const [title, setTitle] = useState()\n  const [skill, setSkill] = useState(\"\")\n  const [salary, setSalary] = useState()\n  const [maxapp, setMaxapp] = useState()\n  const [maxpos, setMaxpos] = useState()\n  const [jtype, setJtype] = useState()\n  const [duration, setDuration] = useState()\n  const [dod, setDod] = useState()\n  const history = useHistory();\n  \n  const {userData, setUserData } = useContext(UserContext);\n\n  const jobTypes = [\"Full-Time\",\"Part-Time\", \"Work from Home\"]\n  const durTypes = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n\n  const submit = async (e) => {\n    e.preventDefault()\n    var dop = new Date()\n    const newJob = {title, skills, salary, maxapp, maxpos, jtype, duration, dod, dop};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        await Axios.post(\"http://localhost:5000/job/add\", newJob, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <CreateIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Create Job\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> â¢ Basic Info</h3>\n            </Grid>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"title\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"title\"\n                label=\"Job Title\"\n                onChange={(e) => setTitle(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Autocomplete\n              id=\"jtype\"\n              options={jobTypes}\n              getOptionLabel={(option) => option}\n              style={{ width: \"100%\" }}\n              renderInput={(params) => <TextField {...params} required label=\"Job Type\" variant=\"outlined\" />}\n              onInputChange={(event, value)=>{\n                  setJtype(value)\n              }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <TextField\n              fullWidth\n              id=\"date\"\n              variant=\"outlined\"\n              label=\"Deadline\"\n              type=\"date\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(e) => setDod(e.target.value)}\n            />\n            </Grid>\n          \n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> â¢ Other Info</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                  name=\"title\"\n                  variant=\"outlined\"\n                  required\n                  type=\"number\"\n                  fullWidth\n                  id=\"title\"\n                  label=\"Salary\"\n                  onChange={(e) => setSalary(e.target.value)}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Autocomplete\n                id=\"jtype\"\n                options={durTypes}\n                getOptionLabel={(option) => option}\n                style={{ width: \"100%\" }}\n                renderInput={(params) => <TextField {...params} required label=\"Duration\" variant=\"outlined\" />}\n                onInputChange={(event, value)=>{\n                  setDuration(value)\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  name=\"maxapp\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth\n                  id=\"maxapp\"\n                  label=\"Max Applicants\"\n                  onChange={(e) => setMaxapp(e.target.value)}\n                />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth\n                  id=\"maxpos\"\n                  label=\"Max Positions\"\n                  name=\"maxpos\"\n                  onChange={(e) => setMaxpos(e.target.value)}\n                />\n            </Grid>\n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> â¢ Required Skills</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {skills?.map(item => {\n                return (\n                  <Grid item key={item}>\n                    <Card>\n                      <CardContent>\n                        {item}\n                        <IconButton onClick={() => {\n                          setSkills(skills.filter(sk => sk !== item))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n          &nbsp;\n          <Grid item xs={12}>\n              <Autocomplete\n                freeSolo\n                name=\"skill\"\n                variant=\"outlined\"\n                fullWidth\n                options={[{title: \"Java\"}, {title: \"C++\"}, {title: \"Python\"},]}\n                getOptionLabel={(option) => option.title}\n                label=\"Skill\" \n                inputValue={skill|| ''}\n                onInputChange={(event, value)=>{\n                  setSkill(value)\n                }} \n                renderInput={(params) => <TextField {...params} label=\"Enter new skill\" variant=\"outlined\" />}\n              />\n            </Grid>\n          <Grid item xs={12}>\n          \n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              if (!skills.filter(sk => sk === skill).length && skill !== \"\")\n                setSkills([...skills, skill])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Skills </span>\n          </Button>\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"secondary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    </Grid> \n  );\n}\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/context/UserContext.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Profile.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Profile.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/NewJob.page.js",["134","135","136","137"],"import Profile from '../recruiter/NewJob.component'\nimport Navbar from '../recruiter/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"RecruiterProfile\">\n        <Navbar />\n        <Profile />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Dash.component.js",["138","139","140","141"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Dash() {\n  const classes = useStyles();\n  \n  const [jobs, setJobs] = useState([])\n  const [rating, setRating] = useState(3)\n  const [cjob, setCjob] = useState()\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([])\n\n  const {userData, setUserData } = useContext(UserContext);\n\n  const sendData = (async () => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob.applicants.filter(ap => ap.email === userData.user.email)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage+=1\n    console.log(tempApplicant)\n    let applicants = cjob.applicants.filter(ap => ap.email !== userData.user.email)\n    applicants = [...applicants, tempApplicant]\n    let nrating=cjob.nrating+1\n    let trating=cjob.trating+rating\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n    console.log(\"applicants\")\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants, nrating, trating}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n      }\n    }\n  });\n\n\n\n  useEffect( () => {\n      const callData = (async () => {\n        let token = await localStorage.getItem(\"auth-token\")\n        const tokenRes = await Axios.post(\n            \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n        );\n        if (tokenRes.data) {\n          const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n            headers: {\"x-auth-token\": token}\n          });\n          const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n            headers: {\"x-auth-token\": token}\n          });\n          setJobs(jobsAll.data)\n          setUsers(usersAll.data)\n        }\n      });\n      callData()\n      \n      console.log(userData)\n  }, [])\n  const jobUser = () => jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData.user.email && ap.stage !== -1).length)\n  let newJobs = jobUser()\n  console.log(\"dfsahfasf\", newJobs)\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height: \"100%\"}}>\n        <div className={classes.paper}>\n          <h1>My Applications</h1>\n        </div>\n            <Grid container spacing={4}>\n              {newJobs?.map(job => {\n                let appVals = job.applicants.filter(ap => ap.email === userData.user.email)\n                appVals=appVals[0]\n                const handleClickOpen = () => {\n                    setCjob(job);\n                    setOpen(true);\n                };\n                const handleCloseAndSubmit = async () => {\n                    await sendData();\n                    setOpen(false);\n                };\n                const handleClose = () => {\n                    setOpen(false);\n                };\n                return (\n                  <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n                    <h4>{job.title}</h4>\n                    <Grid container spacing={1}>\n                     <Grid item xs={6}>\n                        Job Type: {job.jtype}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Company:&nbsp;\n                        {\n                          users?.filter(user => (user.email === job.remail)).map(  user => {\n                            return (\n                              <>\n                              {user.cname}\n                              </>\n                            )\n                          })\n                        }\n                     </Grid>\n                     <Grid item xs={6}>\n                        Salary:  {job.salary}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Skills : |&nbsp;{job.skills.join(\" | \" )} |\n                     </Grid>\n                     &nbsp;\n                     <br/>\n                     <Grid item xs={12} style={{alignItems: \"center\"}}>\n                      <h6>Status:&nbsp;\n                      {\n                        (appVals.stage < 2) ? (\n                          <a style={{\n                            color: \"white\",\n                            backgroundColor: '#f1356d',\n                            borderRadius: '8px'\n                          }}> \n                          &nbsp; Pending &nbsp;\n                          </a>\n                        ) : (\n                          <a style={{\n                            color: \"white\",\n                            backgroundColor: '#18de46',\n                            borderRadius: '8px'\n                          }}> \n                          &nbsp; Accepted &nbsp;\n                          </a> \n                        )\n                      }\n                      </h6>\n                     </Grid>\n                    </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                    {\n                      (appVals.stage===2) ? \n                      (\n                        <Button\n                        onClick={() => handleClickOpen()}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                        >\n                          <span style={{color: \"white\"}}> Rate Job</span>\n                        </Button>\n                      ) : (<></>)\n                    }\n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{job.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                          <h6>Rate your job!</h6>\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            type=\"number\"\n                            label=\"Rating (Out of 5 â)\"\n                            fullWidth\n                            value={rating}\n                            onChange={(e) => setRating(e.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                    \n                </CardActions>\n\n                  </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    </Grid> \n  );\n}\n\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Search.component.js",["142","143"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Search() {\n  const classes = useStyles();\n  \n  const [jobs, setJobs] = useState([])\n  const [sop, setSop] = useState(\"\")\n  const [cjob, setCjob] = useState({\"skills\": []})\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([])\n  const [open2, setOpen2] = useState(false);\n\n\n\n  const handleClose2 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen2(false);\n  };\n\n  const {userData} = useContext(UserContext);\n\n\n  const sendData = (async () => {\n    let token = await localStorage.getItem(\"auth-token\")\n    const applicants = [...cjob.applicants, { sop, email: userData.user.email }]\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n    console.log(applicants)\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n      }\n    }\n  });\n\n  const filled = jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData?.user?.email && ap?.stage !== -1).length).length\n  console.log(\"Filled:\", filled)\n  const employed = jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData?.user?.email && ap?.stage >= 2).length).length\n  console.log(\"employed\", employed)\n\n  useEffect( () => {\n      const callData = (async () => {\n        let token = await localStorage.getItem(\"auth-token\")\n        const tokenRes = await Axios.post(\n            \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n        );\n        if (tokenRes.data) {\n          const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n            headers: {\"x-auth-token\": token}\n          });\n          const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n            headers: {\"x-auth-token\": token}\n          });\n          setJobs(jobsAll.data)\n          setUsers(usersAll.data)\n        }\n      });\n      callData()\n      console.log(userData)\n  }, [])\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height: \"100%\"}}>\n        <div className={classes.paper}></div>\n            <Grid container spacing={4}>\n              {jobs?.map(job => {\n                const handleClickOpen = () => {\n                    if (filled >= 10 || employed){\n                        setOpen2(true);\n                    }\n                    else{\n                    setCjob(job);\n                    setOpen(true);\n                    }\n                };\n                const handleCloseAndSubmit = async () => {\n                    await sendData();\n                    setOpen(false);\n                    setSop(\"\")\n                };\n                const handleClose = () => {\n                    setOpen(false);\n                };\n                let value = 0\n                if (job.nrating) value = (job.trating/job.nrating)\n\n                return (\n                  <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n                    \n                        <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                        <h4>{job.title}</h4>\n                        </Grid>\n                        <Grid item xs={6}>\n                            Rating : {value} â\n                        </Grid>\n                    \n                     <Grid item xs={6}>\n                        Job Type: {job.jtype}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Company:&nbsp;\n                        {\n                          users?.filter(user => (user.email === job.remail)).map(  user => {\n                            return (\n                              <>\n                              {user.cname}\n                              </>\n                            )\n                          })\n                        }\n                     </Grid>\n                     <Grid item xs={6}>\n                        Salary:  $ {job.salary}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Skills : |&nbsp;{job.skills.join(\" | \" )} |\n                     </Grid>\n                     <Grid item xs={6}>\n                        Maximum Positions: {job.maxpos}\n                    </Grid>\n                     <Grid item xs={6}>\n                        Deadline: { (new Date(job.dod)).toDateString() }\n                     </Grid>\n                     <Grid item xs={6}>\n                        \n                     </Grid>\n                    </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                    {\n                      (!job.applicants.filter(ap => ap.email === userData.user.email).length) ? \n                      (\n                        (job.applicants.filter(ap => ap.stage != -1).length >= job.maxapp) ? \n                        (\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                className={classes.submit}\n                                color=\"\"\n                                >\n                                <span style={{color: \"red\"}}> Full </span>\n                            </Button>\n                        ) :\n                        (\n                            <Button\n                            onClick={handleClickOpen}\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submit}\n                            color=\"primary\"\n                            >\n                            <span style={{color: \"white\"}}> Apply </span>\n                            </Button>\n                        )\n                        \n\n                      ) : \n                      (\n                        <Button\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"secondary\"\n                        >\n                          <span style={{color: \"white\"}}> Applied </span>\n                        </Button>\n                      )\n                    }\n                    <Snackbar open={open2} autoHideDuration={6000} onClose={handleClose2}>\n                    {\n                      (employed) ? \n                      (\n                        <Alert onClose={handleClose2} severity=\"error\">\n                                    Already Employed in Job!\n                        </Alert>\n\n                      ) \n                      : \n                      (\n                        <Alert onClose={handleClose2} severity=\"error\">\n                                    Application limit exceeded!\n                        </Alert>\n                      )\n                    }\n                    </Snackbar>\n                    \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{cjob.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                        <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            Job Type: {cjob.jtype}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Company:&nbsp;\n                            {\n                            users?.filter(user => (user.email === cjob.remail)).map(  user => {\n                                return (\n                                <>\n                                {user.cname}\n                                </>\n                                )\n                            })\n                            }\n                        </Grid>\n                        <Grid item xs={6}>\n                            Salary:  $ {cjob.salary}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Skills : |&nbsp;{cjob.skills.join(\" | \" )} |\n                        </Grid>\n                        <Grid item xs={6}>\n                            Maximum Positions: {cjob.maxpos}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Deadline: { (new Date(cjob.dod)).toDateString() }\n                        </Grid>\n                        </Grid>\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Statement of Purpose\"\n                            fullWidth\n                            onChange={(e) => setSop(e.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                </CardActions>\n\n                  </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    </Grid> \n  );\n}\n\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Dash.page.js",["144","145","146","147"],"import Dash from '../applicant/Dash.component'\nimport Navbar from '../applicant/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"ApplicantProfile\">\n        <Navbar />\n        <Dash />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Search.page.js",["148","149","150","151"],"import Search from '../applicant/Search.component'\nimport Navbar from '../applicant/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"ApplicantProfile\">\n        <Navbar />\n        <Search />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Dash.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Dash.component.js",["152","153","154","155","156","157","158","159"],"import { useState, useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Dash() {\n  const classes = useStyles();\n\n  const [jobs, setJobs] = useState([])\n  const [cjob, setCjob] = useState({ \"skills\": [], \"applicants\": [] })\n  const [users, setUsers] = useState()\n  const { userData, setUserData } = useContext(UserContext);\n  const [apemail, setApemail] = useState(\"\")\n\n  const [open, setOpen] = useState(false)\n  const [open2, setOpen2] = useState(false)\n  const [open3, setOpen3] = useState(false)\n  const [maxpos, setMaxpos] = useState()\n  const [maxapp, setMaxapp] = useState()\n  const [dod, setDod] = useState()\n\n  const handleClose3 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen3(false);\n  };\n\n  const sendData = (async () => {\n    let token = await localStorage.getItem(\"auth-token\")\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {maxpos, maxapp, dod}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n      }\n    }\n  });\n\n  const reject = (async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob?.applicants?.filter(ap => ap.email === email)\n    console.log(tempApplicant)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage = -1\n    console.log(tempApplicant)\n    let applicants = cjob.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n      \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n    );\n    let temp = cjob\n    temp.applicants=applicants\n    if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, { applicants }, {\n        headers: { \"x-auth-token\": token }\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setCjob(temp)\n      }\n    }\n  });\n\n  const shortlist = (async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob?.applicants?.filter(ap => ap.email === email)\n    console.log(tempApplicant)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage += 1\n    console.log(tempApplicant)\n    let applicants = cjob.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n      \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n    );\n    let temp = cjob\n    temp.applicants=applicants\n    if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, { applicants }, {\n        headers: { \"x-auth-token\": token }\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setCjob(temp)\n      }\n    }\n  });\n\n  const select = async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob.applicants.filter(ap => ap.email === email)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage+=1\n    console.log(tempApplicant)\n    let applicants = cjob.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n      await jobs.map( async job => {\n        let updateApplicants = job.applicants.filter(ap => ap.email !== email)\n        console.log(\"update\", updateApplicants)\n        if (tokenRes.data) {\n          await Axios.post(`http://localhost:5000/job/update/${job._id}`, {applicants : updateApplicants}, {\n              headers: {\"x-auth-token\": token}\n          });}\n      }\n      )\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n        setCjob(jobs.filter(job => job._id ===cjob._id))\n        setCjob(cjob[0])\n      }\n    }\n  }\n\n  useEffect(() => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n      );\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setUsers(usersAll.data)\n      }\n    });\n    callData()\n    console.log(userData)\n  }, [])\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{ height: \"100vh\" }}>\n      <Grid container className={classes.image} >\n        <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{ height: \"100%\" }}>\n          <div className={classes.paper}>\n            <h1>My Jobs</h1>\n          </div>\n          <Grid container spacing={4}>\n            {jobs?.filter(job => job?.remail === userData?.user?.email).map(job => {\n              const handleClickOpen = () => {\n                setCjob(job);\n                setOpen(true);\n              };\n\n              const handleClose = () => {\n                setOpen(false);\n              };\n\n              const handleClickOpen2 = () => {\n                setCjob(job);\n                setMaxpos(job.maxpos)\n                setMaxapp(job.maxapp)\n                setDod(job.dod)\n                console.log(\"dod\", job.dod)\n                setOpen2(true);\n              };\n\n              const handleClose2 = () => {\n                setOpen2(false);\n              };\n\n              const handleCloseAndSubmit = () => {\n                sendData()\n                handleClose2()\n              }\n\n              let value = 0\n              if (job.nrating) value = (job.trating / job.nrating)\n\n              return (\n                <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n\n                      <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                          <h4>{job.title}</h4>\n                        </Grid>\n                        <Grid item xs={6}>\n                          Rating : {value} â\n                        </Grid>\n\n                        <Grid item xs={6}>\n                          Job Type: {job.jtype}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Salary:  $ {job.salary}\n                        </Grid>\n\n                        <Grid item xs={6}>\n                          Maximum Positions: {job.maxpos}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Maximum Applicants: {job.maxapp}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Skills : |&nbsp;{job.skills.join(\" | \")} |\n                     </Grid>\n                        <Grid item xs={6}>\n                          Deadline: {(new Date(job.dod)).toDateString()}\n                        </Grid>\n                        <Grid item xs={6}>\n\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                    <CardActions>\n                      <Button\n                        onClick={handleClickOpen}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                      >\n                        <span style={{ color: \"white\" }}> View Applicants </span>\n                      </Button>\n                      <Button\n                        onClick={handleClickOpen2}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"secondary\"\n                      >\n                        <span style={{ color: \"white\" }}> Edit </span>\n                      </Button>\n                      <Dialog fullScreen open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" >\n                        <DialogContent style={{ backgroundColor: \"#152963\" }}>\n                          <DialogContentText>\n                            <div className={classes.paper}>\n                              <a style={{ color: \"white\" }}>Job Title:</a> <h1 style={{ color: \"white\" }}> {cjob?.title}</h1>\n                            </div>\n                            <Grid container spacing={2}>\n                              {cjob?.applicants?.filter(ap => ap.stage != -1 && ap.stage < 2).map(ap => {\n                                let applicant = users.filter(user => user.email === ap.email)\n                                const forShortlist = () => {\n                                  shortlist(applicant.email)\n                                }\n                                const forReject = () => {\n                                  reject(applicant.email)\n                                }\n                                const forSelect = () => {\n                                  if (cjob.applicants.filter(apl => apl.stage >=2).length >= cjob.maxpos){\n                                    setOpen3(true)\n                                  }\n                                  else{\n                                    select(applicant.email)\n                                  }\n                                  \n                                }\n                                applicant = applicant[0]\n                                let value = 0\n                                if (applicant.nrating) value = (applicant.trating / applicant.nrating)\n                                return (\n                                  <Grid item xs={6}>\n                                    <Card>\n                                      <CardContent>\n                                        <Grid container xs={12}>\n                                          <Grid item xs={6}>\n                                            <h4 inline>{applicant.fname} {applicant.lname}</h4>\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Rating: {value} â\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Skills : |&nbsp;{applicant.skills.join(\" | \")} |\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Email : {applicant.email}\n                                          </Grid>\n                                          <Grid item xs={12}>\n                                            Eduacation : <br /> &nbsp;\n                                          <Grid container spacing={2}>\n                                              {applicant.education.map(ed => {\n                                                let eyear = \"Present\"\n                                                if (ed.eyear != \"\") eyear = ed.eyear\n                                                return (\n                                                  <Grid item xs={6}>\n                                                    <Card>\n                                                      <CardContent>\n                                                        <Grid container spacing={2}>\n                                                          <Grid item xs={6}>\n                                                            <h5>{ed.institute}</h5>\n                                                          </Grid>\n                                                          <Grid item xs={6}>\n                                                            {ed.syear}-{eyear}\n                                                          </Grid>\n                                                        </Grid>\n                                                      </CardContent>\n                                                    </Card>\n                                                  </Grid>\n                                                )\n                                              })\n                                              }\n                                            </Grid>\n                                          </Grid>\n                                        </Grid>\n                                      </CardContent>\n                                      <CardActions>\n                                        {\n                                          (ap.stage == 1) ?\n                                            (\n                                              <Button\n                                                onClick={forSelect}\n                                                fullWidth\n                                                variant=\"contained\"\n                                                className={classes.submit}\n                                                color=\"primary\"\n                                              >\n                                                <span style={{ color: \"white\" }}> Accept </span>\n                                              </Button>\n                                            ) :\n                                            (\n                                              <Button\n                                                onClick={forShortlist}\n                                                fullWidth\n                                                variant=\"contained\"\n                                                className={classes.submit}\n                                                color=\"\"\n                                              >\n                                                <span style={{ color: \"black\" }}> Shortlist </span>\n                                              </Button>\n                                            )}\n                                        <Button\n                                          onClick={forReject}\n                                          fullWidth\n                                          variant=\"contained\"\n                                          className={classes.submit}\n                                          color=\"secondary\"\n                                        >\n                                          <span style={{ color: \"white\" }}> Reject </span>\n                                        </Button>\n                                        <Snackbar open={open3} autoHideDuration={6000} onClose={handleClose3}>\n                                          <Alert onClose={handleClose3} severity=\"error\">\n                                                    Max positions filled!\n                                          </Alert>\n                                        </Snackbar>\n                                      </CardActions>\n                                    </Card>\n                                  </Grid>\n                                )\n                              })\n                              }\n                            </Grid>\n\n                            <Grid container spacing={2}>\n\n                            </Grid>\n                          </DialogContentText>\n                        </DialogContent>\n                        <DialogActions style={{ backgroundColor: \"#5a1563\" }}>\n                          <Button onClick={handleClose} color=\"secondary\">\n                            <span style={{ color: \"red\" }}> <h3 style={{\n                              color: \"white\",\n                              backgroundColor: 'red',\n                              borderRadius: '8px',\n                              textTransform: 'capitalize'\n                            }}>&nbsp; Close  &nbsp; </h3> </span>\n                          </Button>\n                        </DialogActions>\n                      </Dialog>\n                      <Dialog open={open2} onClose={handleClose2} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{cjob.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                        \n                        </DialogContentText>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12} sm={6}>\n                              <TextField\n                                required\n                                name=\"maxapp\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                fullWidth\n                                id=\"maxapp\"\n                                label=\"Max Applicants\"\n                                value={maxapp}\n                                onChange={(e) => setMaxapp(e.target.value)}\n                              />\n                          </Grid>\n                          <Grid item xs={12} sm={6}>\n                              <TextField\n                                required\n                                variant=\"outlined\"\n                                type=\"number\"\n                                fullWidth\n                                id=\"maxpos\"\n                                label=\"Max Positions\"\n                                value={maxpos}\n                                name=\"maxpos\"\n                                onChange={(e) => setMaxpos(e.target.value)}\n                              />\n                          </Grid>\n                          <Grid item xs={12}>\n                          <TextField\n                            fullWidth\n                            id=\"date\"\n                            variant=\"outlined\"\n                            label=\"Deadline\"\n                            type=\"date\"\n                            className={classes.textField}\n                            defaultValue={job.dod.slice(0,10)}\n                            InputLabelProps={{\n                              shrink: true,\n                            }}\n                            onChange={(e) => setDod(e.target.value)}\n                          />\n                          </Grid>\n                        </Grid>\n                                      \n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Save\n                        </Button>\n                        <Button onClick={handleClose2} color=\"primary\">\n                            Cancel\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n\n\n                    </CardActions>\n                  </Card>\n                </Grid>\n              )\n            })}\n          </Grid>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7} />\n      </Grid>\n    </Grid>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Emp.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Emp.component.js",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":36,"column":34,"nodeType":"197","endLine":39,"endColumn":12},{"ruleId":"198","severity":1,"message":"199","line":67,"column":10,"nodeType":"200","messageId":"201","endLine":67,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":73,"column":10,"nodeType":"200","messageId":"201","endLine":73,"endColumn":18},{"ruleId":"202","severity":1,"message":"203","line":32,"column":17,"nodeType":"204","endLine":36,"endColumn":20},{"ruleId":"202","severity":1,"message":"203","line":32,"column":17,"nodeType":"204","endLine":36,"endColumn":20},{"ruleId":"198","severity":1,"message":"205","line":79,"column":20,"nodeType":"200","messageId":"201","endLine":79,"endColumn":31},{"ruleId":"206","severity":1,"message":"207","line":188,"column":31,"nodeType":"208","messageId":"209","endLine":188,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":244,"column":124,"nodeType":"208","messageId":"209","endLine":244,"endColumn":126},{"ruleId":"198","severity":1,"message":"205","line":68,"column":20,"nodeType":"200","messageId":"201","endLine":68,"endColumn":31},{"ruleId":"195","severity":1,"message":"210","line":87,"column":5,"nodeType":"211","endLine":87,"endColumn":7,"suggestions":"212"},{"ruleId":"198","severity":1,"message":"199","line":80,"column":10,"nodeType":"200","messageId":"201","endLine":80,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":80,"column":20,"nodeType":"200","messageId":"201","endLine":80,"endColumn":31},{"ruleId":"198","severity":1,"message":"213","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":20},{"ruleId":"198","severity":1,"message":"214","line":3,"column":22,"nodeType":"200","messageId":"201","endLine":3,"endColumn":31},{"ruleId":"198","severity":1,"message":"215","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":19},{"ruleId":"198","severity":1,"message":"216","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"205","line":76,"column":20,"nodeType":"200","messageId":"201","endLine":76,"endColumn":31},{"ruleId":"195","severity":1,"message":"210","line":128,"column":6,"nodeType":"211","endLine":128,"endColumn":8,"suggestions":"217"},{"ruleId":"202","severity":1,"message":"203","line":189,"column":27,"nodeType":"204","endLine":193,"endColumn":30},{"ruleId":"202","severity":1,"message":"203","line":197,"column":27,"nodeType":"204","endLine":201,"endColumn":30},{"ruleId":"195","severity":1,"message":"210","line":140,"column":6,"nodeType":"211","endLine":140,"endColumn":8,"suggestions":"218"},{"ruleId":"206","severity":1,"message":"207","line":221,"column":63,"nodeType":"208","messageId":"209","endLine":221,"endColumn":65},{"ruleId":"198","severity":1,"message":"213","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":20},{"ruleId":"198","severity":1,"message":"214","line":3,"column":22,"nodeType":"200","messageId":"201","endLine":3,"endColumn":31},{"ruleId":"198","severity":1,"message":"215","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":19},{"ruleId":"198","severity":1,"message":"216","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"213","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":20},{"ruleId":"198","severity":1,"message":"214","line":3,"column":22,"nodeType":"200","messageId":"201","endLine":3,"endColumn":31},{"ruleId":"198","severity":1,"message":"215","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":19},{"ruleId":"198","severity":1,"message":"216","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"205","line":78,"column":21,"nodeType":"200","messageId":"201","endLine":78,"endColumn":32},{"ruleId":"198","severity":1,"message":"219","line":79,"column":10,"nodeType":"200","messageId":"201","endLine":79,"endColumn":17},{"ruleId":"198","severity":1,"message":"220","line":79,"column":19,"nodeType":"200","messageId":"201","endLine":79,"endColumn":29},{"ruleId":"195","severity":1,"message":"210","line":226,"column":6,"nodeType":"211","endLine":226,"endColumn":8,"suggestions":"221"},{"ruleId":"202","severity":1,"message":"203","line":329,"column":31,"nodeType":"204","endLine":329,"endColumn":61},{"ruleId":"206","severity":1,"message":"207","line":332,"column":72,"nodeType":"208","messageId":"209","endLine":332,"endColumn":74},{"ruleId":"206","severity":1,"message":"207","line":374,"column":62,"nodeType":"208","messageId":"209","endLine":374,"endColumn":64},{"ruleId":"206","severity":1,"message":"222","line":399,"column":53,"nodeType":"208","messageId":"209","endLine":399,"endColumn":55},{"ruleId":"198","severity":1,"message":"216","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":20},{"ruleId":"198","severity":1,"message":"223","line":5,"column":8,"nodeType":"200","messageId":"201","endLine":5,"endColumn":14},{"ruleId":"198","severity":1,"message":"224","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":14},{"ruleId":"198","severity":1,"message":"225","line":8,"column":8,"nodeType":"200","messageId":"201","endLine":8,"endColumn":17},{"ruleId":"198","severity":1,"message":"226","line":11,"column":8,"nodeType":"200","messageId":"201","endLine":11,"endColumn":11},{"ruleId":"198","severity":1,"message":"227","line":13,"column":8,"nodeType":"200","messageId":"201","endLine":13,"endColumn":12},{"ruleId":"198","severity":1,"message":"228","line":14,"column":8,"nodeType":"200","messageId":"201","endLine":14,"endColumn":19},{"ruleId":"198","severity":1,"message":"229","line":15,"column":8,"nodeType":"200","messageId":"201","endLine":15,"endColumn":18},{"ruleId":"198","severity":1,"message":"230","line":18,"column":8,"nodeType":"200","messageId":"201","endLine":18,"endColumn":25},{"ruleId":"198","severity":1,"message":"231","line":19,"column":8,"nodeType":"200","messageId":"201","endLine":19,"endColumn":18},{"ruleId":"198","severity":1,"message":"232","line":20,"column":8,"nodeType":"200","messageId":"201","endLine":20,"endColumn":20},{"ruleId":"198","severity":1,"message":"233","line":23,"column":10,"nodeType":"200","messageId":"201","endLine":23,"endColumn":19},{"ruleId":"198","severity":1,"message":"234","line":69,"column":11,"nodeType":"200","messageId":"201","endLine":69,"endColumn":20},{"ruleId":"198","severity":1,"message":"235","line":69,"column":22,"nodeType":"200","messageId":"201","endLine":69,"endColumn":34},{"ruleId":"198","severity":1,"message":"236","line":70,"column":11,"nodeType":"200","messageId":"201","endLine":70,"endColumn":17},{"ruleId":"198","severity":1,"message":"237","line":70,"column":19,"nodeType":"200","messageId":"201","endLine":70,"endColumn":28},{"ruleId":"198","severity":1,"message":"238","line":71,"column":10,"nodeType":"200","messageId":"201","endLine":71,"endColumn":15},{"ruleId":"198","severity":1,"message":"239","line":71,"column":17,"nodeType":"200","messageId":"201","endLine":71,"endColumn":25},{"ruleId":"198","severity":1,"message":"240","line":72,"column":10,"nodeType":"200","messageId":"201","endLine":72,"endColumn":15},{"ruleId":"198","severity":1,"message":"241","line":72,"column":17,"nodeType":"200","messageId":"201","endLine":72,"endColumn":25},{"ruleId":"198","severity":1,"message":"242","line":73,"column":10,"nodeType":"200","messageId":"201","endLine":73,"endColumn":15},{"ruleId":"198","severity":1,"message":"243","line":73,"column":17,"nodeType":"200","messageId":"201","endLine":73,"endColumn":25},{"ruleId":"198","severity":1,"message":"244","line":74,"column":10,"nodeType":"200","messageId":"201","endLine":74,"endColumn":19},{"ruleId":"198","severity":1,"message":"245","line":74,"column":21,"nodeType":"200","messageId":"201","endLine":74,"endColumn":33},{"ruleId":"198","severity":1,"message":"246","line":75,"column":10,"nodeType":"200","messageId":"201","endLine":75,"endColumn":15},{"ruleId":"198","severity":1,"message":"247","line":75,"column":17,"nodeType":"200","messageId":"201","endLine":75,"endColumn":25},{"ruleId":"198","severity":1,"message":"248","line":76,"column":10,"nodeType":"200","messageId":"201","endLine":76,"endColumn":15},{"ruleId":"198","severity":1,"message":"249","line":76,"column":17,"nodeType":"200","messageId":"201","endLine":76,"endColumn":25},{"ruleId":"198","severity":1,"message":"250","line":78,"column":10,"nodeType":"200","messageId":"201","endLine":78,"endColumn":14},{"ruleId":"198","severity":1,"message":"205","line":79,"column":20,"nodeType":"200","messageId":"201","endLine":79,"endColumn":31},{"ruleId":"195","severity":1,"message":"210","line":97,"column":6,"nodeType":"211","endLine":97,"endColumn":8,"suggestions":"251"},"no-native-reassign",["252"],"no-negated-in-lhs",["253"],"react-hooks/exhaustive-deps","Assignments to the 'userData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","no-unused-vars","'userData' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setUserData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["254"],"'useContext' is defined but never used.","'useEffect' is defined but never used.","'UserContext' is defined but never used.","'useHistory' is defined but never used.",["255"],["256"],"'apemail' is assigned a value but never used.","'setApemail' is assigned a value but never used.",["257"],"Expected '===' and instead saw '=='.","'Avatar' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Box' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'PersonIcon' is defined but never used.","'DeleteOutlineIcon' is defined but never used.","'IconButton' is defined but never used.","'Autocomplete' is defined but never used.","'Copyright' is defined but never used.","'education' is assigned a value but never used.","'setEducation' is assigned a value but never used.","'skills' is assigned a value but never used.","'setSkills' is assigned a value but never used.","'fname' is assigned a value but never used.","'setFname' is assigned a value but never used.","'lname' is assigned a value but never used.","'setLname' is assigned a value but never used.","'skill' is assigned a value but never used.","'setSkill' is assigned a value but never used.","'institute' is assigned a value but never used.","'setInstitute' is assigned a value but never used.","'syear' is assigned a value but never used.","'setSyear' is assigned a value but never used.","'eyear' is assigned a value but never used.","'setEyear' is assigned a value but never used.","'jobs' is assigned a value but never used.",["258"],"no-global-assign","no-unsafe-negation",{"desc":"259","fix":"260"},{"desc":"259","fix":"261"},{"desc":"259","fix":"262"},{"desc":"259","fix":"263"},{"desc":"259","fix":"264"},"Update the dependencies array to be: [userData]",{"range":"265","text":"266"},{"range":"267","text":"266"},{"range":"268","text":"266"},{"range":"269","text":"266"},{"range":"270","text":"266"},[2782,2784],"[userData]",[4314,4316],[4668,4670],[7792,7794],[3265,3267]]