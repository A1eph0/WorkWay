[{"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/index.js":"1","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/App.js":"2","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Home.component.js":"3","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Navbar.component.js":"4","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignIn.component.js":"5","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignUp.component.js":"6","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Navbar.component.js":"7","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Navbar.component.js":"8","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Profile.component.js":"9","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignUp.page.js":"10","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignIn.page.js":"11","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/Home.page.js":"12","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Profile.component.js":"13","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/NewJob.component.js":"14","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/context/UserContext.js":"15","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Profile.page.js":"16","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Profile.page.js":"17","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/NewJob.page.js":"18","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Dash.component.js":"19","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Search.component.js":"20","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Dash.page.js":"21","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Search.page.js":"22","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Dash.page.js":"23","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Dash.component.js":"24","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Emp.page.js":"25","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Emp.component.js":"26"},{"size":266,"mtime":1611129499941,"results":"27","hashOfConfig":"28"},{"size":2453,"mtime":1611663903151,"results":"29","hashOfConfig":"28"},{"size":2857,"mtime":1611166638672,"results":"30","hashOfConfig":"28"},{"size":680,"mtime":1610977940027,"results":"31","hashOfConfig":"28"},{"size":4982,"mtime":1611661878243,"results":"32","hashOfConfig":"28"},{"size":7608,"mtime":1611676017060,"results":"33","hashOfConfig":"28"},{"size":1192,"mtime":1611663983836,"results":"34","hashOfConfig":"28"},{"size":1236,"mtime":1611666942857,"results":"35","hashOfConfig":"28"},{"size":11951,"mtime":1611664636473,"results":"36","hashOfConfig":"28"},{"size":652,"mtime":1611222772874,"results":"37","hashOfConfig":"28"},{"size":652,"mtime":1611222789282,"results":"38","hashOfConfig":"28"},{"size":653,"mtime":1611222613692,"results":"39","hashOfConfig":"28"},{"size":7127,"mtime":1611671716751,"results":"40","hashOfConfig":"28"},{"size":10435,"mtime":1611667189355,"results":"41","hashOfConfig":"28"},{"size":73,"mtime":1611142853463,"results":"42","hashOfConfig":"28"},{"size":570,"mtime":1611659917426,"results":"43","hashOfConfig":"28"},{"size":570,"mtime":1611238998174,"results":"44","hashOfConfig":"28"},{"size":396,"mtime":1611342733045,"results":"45","hashOfConfig":"28"},{"size":10370,"mtime":1611672299286,"results":"46","hashOfConfig":"28"},{"size":21544,"mtime":1611671630650,"results":"47","hashOfConfig":"28"},{"size":388,"mtime":1611395649838,"results":"48","hashOfConfig":"28"},{"size":394,"mtime":1611395624539,"results":"49","hashOfConfig":"28"},{"size":242,"mtime":1611483446509,"results":"50","hashOfConfig":"28"},{"size":27091,"mtime":1611679269614,"results":"51","hashOfConfig":"28"},{"size":233,"mtime":1611551747660,"results":"52","hashOfConfig":"28"},{"size":13932,"mtime":1611683825859,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1jdjf4c",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"56"},"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/index.js",[],["123","124"],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/App.js",["125"],"import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport UserContext from './context/UserContext'\nimport Home from './components/misc-pages/Home.page'\nimport SignIn from './components/misc-pages/SignIn.page'\nimport SignUp from './components/misc-pages/SignUp.page'\nimport A_Profile from './components/a-pages/Profile.page'\nimport R_Profile from './components/r-pages/Profile.page'\nimport NewJob from './components/r-pages/NewJob.page'\nimport Search from './components/a-pages/Search.page'\nimport A_Dash from './components/a-pages/Dash.page'\nimport R_Dash from './components/r-pages/Dash.page'\nimport Emp from './components/r-pages/Emp.page'\n\nexport default function App() {\n  let [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  })\n  \n  useEffect(() => {\n      const checkLoggedIn = async () => {\n        let token = await localStorage.getItem(\"auth-token\")\n        if (token === null) {\n          localStorage.setItem(\"auth-token\", \"\");\n          token = \"\";\n        }\n        const tokenRes = await Axios.post(\n            \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n        );\n        if (tokenRes.data) {\n          const userRes = await Axios.get(\"http://localhost:5000/user/\", {\n            headers: {\"x-auth-token\": token}\n          });\n          setUserData(userData = {\n            token: token,\n            user: userRes.data\n          });\n        }\n        console.log(\"eaeiheihifuiahfudhfia\", userData)\n      };\n      checkLoggedIn();\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <Router >\n        <UserContext.Provider value={{userData, setUserData}}>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/applicantprofile\" component={A_Profile}/>\n          <Route path=\"/recruiterprofile\" component={R_Profile}/>\n          <Route path=\"/newjob\" component={NewJob}/>\n          <Route path=\"/applicantdash\" component={A_Dash}/>\n          <Route path=\"/recruiterdash\" component={R_Dash}/>\n          <Route path=\"/search\" component={Search}/>\n          <Route path=\"/myemp\" component={Emp}/>\n        </UserContext.Provider>\n      </Router>\n    </div>\n//     <div className=\"App\">\n//       <Navbar />\n//       <Profile />\n//     </div>\n  );\n}\n\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Home.component.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/Navbar.component.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignIn.component.js",["126"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction SignIn() {\n  const classes = useStyles();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const history = useHistory();\n\n  const {userData, setUserData } = useContext(UserContext);\n  const [open, setOpen] = useState(false)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  \n\n  const submit = async (e) => {\n    e.preventDefault()\n    try{\n    const loginRes = await Axios.post(\n      \"http://localhost:5000/user/signin\",\n      {\n        email,\n        password\n      }\n    );\n    setUserData({\n      token: loginRes.data.token,\n      user: loginRes.data.user\n    });\n    console.log(loginRes.data.token)\n    localStorage.setItem(\"auth-token\", loginRes.data.token);\n    history.push(\"/\")\n    }\n    catch(err){\n      setOpen(true)\n    }\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root} >\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} onSubmit={submit}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n            <span style={{color: \"white\"}}> Sign In </span>\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href=\"/signup\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Invalid Login Credentials!\n        </Alert>\n      </Snackbar>\n    </Grid>\n  );\n}\n\nexport default SignIn;\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc/SignUp.component.js",["127"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Dropdown } from 'react-bootstrap'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      height: '100vh',\n    },\n    image: {\n      backgroundImage: 'url(http://images.unsplash.com/photo-1527192491265-7e15c55b1ed2?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)',\n      backgroundRepeat: 'no-repeat',\n      backgroundColor:\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    },\n    paper: {\n      margin: theme.spacing(8, 4),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(1),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [utype, setUType] = useState(\"Applicant\")\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [cpassword, setCPassword] = useState();\n  const [fname, setFname] = useState()\n  const [lname, setLname] = useState()\n  const [cname, setCname] = useState()\n  \n  const history = useHistory();\n\n  const {userData, setUserData} = useContext(UserContext);\n  const [open, setOpen] = useState(false)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  \n\n  const submit = async (e) => {\n    e.preventDefault();\n    try{\n    const newUser = {email, password, cpassword, utype, fname, lname, cname};\n    await Axios.post(\n      \"http://localhost:5000/user/signup\",\n      newUser\n    );\n    const loginRes = await Axios.post(\n      \"http://localhost:5000/user/signin\",\n      {\n        email,\n        password,\n      }\n    );\n    setUserData({\n      token: loginRes.data.token,\n      user: loginRes.data.user\n    });\n    localStorage.setItem(\"auth-token\", loginRes.data.token);\n    history.push(\"/\");\n    }\n    catch (err){\n      setOpen(true)\n    }\n  };\n\n\n  return (\n    <Grid container component=\"main\" className=\"classes.root\" style={{height:\"100vh\"}}>\n    <CssBaseline />\n    <Grid item xs={false} sm={4} md={7} className={classes.image} />\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" size=\"sm\">\n                    {utype}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={()=>{setUType('Applicant')}}>Applicant</Dropdown.Item>\n                    <Dropdown.Item onClick={()=>{setUType('Recruiter')}}>Recruiter</Dropdown.Item>\n                </Dropdown.Menu>\n        </Dropdown>\n        <form className={classes.form} onSubmit={submit}>\n          <Grid container spacing={2}>\n            {\n              (utype===\"Applicant\") ? (\n                <>\n                  <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        label=\"First Name\"\n                        onChange={(e) => setFname(e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        label=\"Last Name\"\n                        onChange={(e) => setLname(e.target.value)}\n                      />\n                    </Grid>\n                </>\n              ): (\n                <>\n                <Grid item xs={12}>\n                  <TextField\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"cName\"\n                    label=\"Company Name\"\n                    onChange={(e) => setCname(e.target.value)}\n                  />\n                </Grid>\n              </>\n              )\n            }\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              \n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"cpassword\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"cpassword\"\n                onChange={(e) => setCPassword(e.target.value)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n          >\n          <span style={{color: \"white\"}}> Sign Up </span>\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/signin\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </form>\n      </div>\n      </Grid>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Please check entered fields!\n        </Alert>\n      </Snackbar>\n    </Grid>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Navbar.component.js",["128"],"import {useContext} from \"react\";\nimport { useHistory} from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\n\n\n\nconst Navbar = () => {\n    const { setUserData }= useContext(UserContext);\n    const history = useHistory();\n\n    const logout = () => {\n        setUserData({\n            token: undefined,\n            user: undefined\n        })\n        localStorage.setItem(\"auth-token\", \"\");\n        history.push(\"/\")\n    }\n    \n    return (  \n        <nav className=\"navbar\">\n            <h1>Work-Way</h1>\n            <div className=\"links\">\n                <a href=\"/applicantdash\">Dashboard</a>\n                <a href=\"/search\">Search Jobs</a>\n                <a href=\"/applicantprofile\" style={{\n                    borderWidth: \"thin\",\n                    borderStyle: \"solid\",\n                    borderColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Edit Profile</a>\n                <a onClick={logout} style={{\n                    color: \"white\",\n                    backgroundColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Sign-Out</a>\n            </div>\n        </nav>\n    );\n}\n \nexport default Navbar;","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Navbar.component.js",["129"],"import {useContext} from \"react\";\nimport { useHistory} from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\n\n\n\nconst Navbar = () => {\n    const { setUserData }= useContext(UserContext);\n    const history = useHistory();\n\n    const logout = () => {\n        setUserData({\n            token: undefined,\n            user: undefined\n        })\n        localStorage.setItem(\"auth-token\", \"\");\n        history.push(\"/\")\n    }\n    return (  \n        <nav className=\"navbar\">\n            <h1>Work-Way</h1>\n            <div className=\"links\">\n                <a href=\"/recruiterdash\">Dashboard</a>\n                <a href=\"/myemp\">My Employees</a>\n                <a href=\"/newjob\">Create Job</a>\n                <a href=\"/recruiterprofile\" style={{\n                    borderWidth: \"thin\",\n                    borderStyle: \"solid\",\n                    borderColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Edit Profile</a>\n                <a onClick={logout} style={{\n                    color: \"white\",\n                    backgroundColor: '#f1356d',\n                    borderRadius: '8px'\n                }}>Sign-Out</a>\n            </div>\n        </nav>\n    );\n}\n \nexport default Navbar;","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Profile.component.js",["130","131","132","133"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [ education, setEducation ] = useState([]);\n  const [ skills, setSkills ] = useState([]);\n  const [fname, setFname] = useState(\"\")\n  const [lname, setLname] = useState(\"\")\n  const [skill, setSkill] = useState(\"\")\n  const [institute, setInstitute] = useState(\"\")\n  const [syear, setSyear] = useState(\"\")\n  const [eyear, setEyear] = useState(\"\")\n  const history = useHistory();\n  const [rating, setRating] = useState()\n  const [open, setOpen] = useState(false)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  \n  \n  const {userData, setUserData } = useContext(UserContext);\n  \n  \n  useEffect( () => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        const recruiterAll = await Axios.get(\"http://localhost:5000/user/getall\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setEducation(recruiterAll.data.education)\n        setSkills(recruiterAll.data.skills)\n        setFname(recruiterAll.data.fname)\n        setLname(recruiterAll.data.lname)\n        if (Number(recruiterAll.data.nrating)){\n          setRating(recruiterAll.data.trating/recruiterAll.data.nrating)\n        }\n        else{\n          setRating(0)\n        }\n      }\n    });\n    callData();\n  }, [])\n  \n  const submit = async (e) => {\n    e.preventDefault()\n    const updatedUser = {education, fname, lname, skills};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        console.log(updatedUser)\n        await Axios.post(\"http://localhost:5000/user/update\", updatedUser, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <PersonIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Edit Profile\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> • Basic Info</h3>\n            </Grid>\n            <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                name=\"fName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"fName\"\n                label=\"First Name\"\n                defaultValue={fname}\n                value={fname}\n                onChange={(e) => setFname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lName\"\n                label=\"Last Name\"\n                name=\"lName\"\n                defaultValue={lname}\n                value={lname}\n                onChange={(e) => setLname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                defaultValue={userData?.user?.email || ''}\n                value={userData?.user?.email || ''}\n                InputProps={{\n                    readOnly: true,\n                }}\n              />\n            </Grid>\n            <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> • Rating: &nbsp; &nbsp; &nbsp;{rating} ★</h3>\n          </Grid>\n          &nbsp;\n            <br />\n            &nbsp;\n            <br/>\n            <Grid container spacing={2}>\n                <h3> • Education</h3>\n            </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {education?.map(item => {\n                let eyear=\"Present\"\n                if (item.eyear!=\"\") eyear=item.eyear\n                return (\n                  <Grid item key={JSON.stringify(item)}>\n                    <Card>\n                      <CardContent>\n                        <h5>{item.institute}</h5>\n                        {item.syear}-{eyear}\n                        <IconButton onClick={() => {\n                          setEducation(education.filter(ed => (ed !== item) ))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                fullWidth\n                id=\"institute\"\n                label=\"Institute\"\n                onChange={(e) => setInstitute(e.target.value)}\n            />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"sYear\"\n                name=\"sYear\"\n                variant=\"outlined\"\n                fullWidth\n                id=\"sYear\"\n                label=\"Start Year\"\n                onChange={(e) => setSyear(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                id=\"eYear\"\n                label=\"End Year\"\n                name=\"eYear\"\n                onChange={(e) => setEyear(e.target.value)}\n              />\n            </Grid>\n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              const item = {institute, syear, eyear}\n              if (syear<0 || (eyear!= \"\" && syear>eyear))\n              {\n                setOpen(true)\n              }\n              else if (!education.filter(ed => JSON.stringify(ed) === JSON.stringify(item)).length && institute !== \"\" && syear != \"\")\n                setEducation([...education, item])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Education </span>\n          </Button>\n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> • Skills</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {skills?.map(item => {\n                return (\n                  <Grid item key={item}>\n                    <Card>\n                      <CardContent>\n                        {item}\n                        <IconButton onClick={() => {\n                          setSkills(skills.filter(sk => sk !== item))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n          &nbsp;\n          <Grid item xs={12}>\n              <Autocomplete\n                freeSolo\n                name=\"skill\"\n                variant=\"outlined\"\n                fullWidth\n                options={[{title: \"Java\"}, {title: \"C++\"}, {title: \"Python\"},]}\n                getOptionLabel={(option) => option.title}\n                label=\"Skill\" \n                inputValue={skill|| ''}\n                onInputChange={(event, value)=>{\n                  setSkill(value)\n                }} \n                renderInput={(params) => <TextField {...params} label=\"Enter new skill\" variant=\"outlined\" />}\n              />\n            </Grid>\n          <Grid item xs={12}>\n          \n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              if (!skills.filter(sk => sk === skill).length && skill !== \"\")\n                setSkills([...skills, skill])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Skills </span>\n          </Button>\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"secondary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n      </Snackbar>\n    </Grid> \n  );\n}\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignUp.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/SignIn.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/misc-pages/Home.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Profile.component.js",["134","135"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [cname, setCname] = useState()\n  const [bio, setBio] = useState()\n  const [phone, setPhone] = useState()\n  const history = useHistory()\n  const [open, setOpen] = useState(false)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const {userData, setUserData } = useContext(UserContext);\n\n  useEffect( () => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        const recruiterAll = await Axios.get(\"http://localhost:5000/user/getall\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setCname(recruiterAll.data.cname)\n        setBio(recruiterAll.data.bio)\n        setPhone(recruiterAll.data.phone)\n      }\n    });\n    callData()\n    console.log(userData)\n\t}, [])\n\n  const submit = async (e) => {\n    e.preventDefault()\n    if(bio.split(\" \").length >250 || phone<0){\n      setOpen(true)\n    }\n    else{\n    const updatedUser = {cname, phone, bio};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        console.log(updatedUser)\n        await Axios.post(\"http://localhost:5000/user/update\", updatedUser, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }}\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height:\"100vh\"}}>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <PersonIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Edit Profile\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> • Basic Info</h3>\n            </Grid>\n            <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"cName\"\n                label=\"Company Name\"\n                defaultValue={cname}\n                value={cname}\n                onChange={(e) => setCname(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                value={userData?.user?.email}\n                InputProps={{\n                    readOnly: true,\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                type=\"number\"\n                id=\"phone\"\n                label=\"Phone\"\n                defaultValue={phone}\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <br />\n            &nbsp;\n            <br/>\n            <Grid container spacing={2}>\n                <h3> • Bio</h3>\n            </Grid>\n            <Grid item xs={12}>\n            \n            <TextField\n                variant=\"outlined\"\n                required\n                multiline\n                fullWidth\n                id=\"bio\"\n                label=\"Tell us more (max 250 words)\"\n                defaultValue={bio}\n                value={bio}\n                onChange={(e) => setBio(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n            />\n            </Grid>\n\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n    </Snackbar>\n    </Grid> \n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/NewJob.component.js",["136","137"],"import {useState, useContext} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CreateIcon from '@material-ui/icons/Create';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [ skills, setSkills ] = useState([]);\n  const [title, setTitle] = useState()\n  const [skill, setSkill] = useState(\"\")\n  const [salary, setSalary] = useState()\n  const [maxapp, setMaxapp] = useState()\n  const [maxpos, setMaxpos] = useState()\n  const [jtype, setJtype] = useState()\n  const [duration, setDuration] = useState()\n  const [dod, setDod] = useState()\n  const history = useHistory();\n  const [open, setOpen] = useState(false)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  \n  \n  \n  const {userData, setUserData } = useContext(UserContext);\n\n  const jobTypes = [\"Full-Time\",\"Part-Time\", \"Work from Home\"]\n  const durTypes = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n\n  const submit = async (e) => {\n    e.preventDefault()\n    console.log(\"dod\", dod, \"New\", new Date().toDateString())\n    if(Number(salary) < 0 || Number(maxpos) <= 0 || Number(maxapp) <= 0 || Number(maxapp) < Number(maxpos) || dod < new Date().toISOString()){\n      setOpen(true)\n    }\n    else{\n    var dop = new Date()\n    const newJob = {title, skills, salary, maxapp, maxpos, jtype, duration, dod, dop};\n    let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n          \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n      );\n      if (tokenRes.data) {\n        await Axios.post(\"http://localhost:5000/job/add\", newJob, {\n          headers: {\"x-auth-token\": token}\n        }); \n      }\n    history.push(\"/\")\n  }}\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square>\n            <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <CreateIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Create Job\n            </Typography>\n            <form className={classes.form} onSubmit={submit}>\n            <Grid container spacing={2}>\n                <h3> • Basic Info</h3>\n            </Grid>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"title\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"title\"\n                label=\"Job Title\"\n                onChange={(e) => setTitle(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Autocomplete\n              id=\"jtype\"\n              options={jobTypes}\n              getOptionLabel={(option) => option}\n              style={{ width: \"100%\" }}\n              renderInput={(params) => <TextField {...params} required label=\"Job Type\" variant=\"outlined\" />}\n              onInputChange={(event, value)=>{\n                  setJtype(value)\n              }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <TextField\n              required\n              fullWidth\n              id=\"date\"\n              variant=\"outlined\"\n              label=\"Deadline\"\n              type=\"datetime-local\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(e) => setDod(e.target.value)}\n            />\n            </Grid>\n          \n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> • Other Info</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                  name=\"title\"\n                  variant=\"outlined\"\n                  required\n                  type=\"number\"\n                  fullWidth\n                  id=\"title\"\n                  label=\"Salary\"\n                  onChange={(e) => setSalary(e.target.value)}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Autocomplete\n                id=\"jtype\"\n                options={durTypes}\n                getOptionLabel={(option) => option}\n                style={{ width: \"100%\" }}\n                renderInput={(params) => <TextField {...params} required label=\"Duration\" variant=\"outlined\" />}\n                onInputChange={(event, value)=>{\n                  setDuration(value)\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  name=\"maxapp\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth\n                  id=\"maxapp\"\n                  label=\"Max Applicants\"\n                  onChange={(e) => setMaxapp(e.target.value)}\n                />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth\n                  id=\"maxpos\"\n                  label=\"Max Positions\"\n                  name=\"maxpos\"\n                  onChange={(e) => setMaxpos(e.target.value)}\n                />\n            </Grid>\n          </Grid>\n          <br />\n          &nbsp;\n          <br/>\n          <Grid container spacing={2}>\n                <h3> • Required Skills</h3>\n          </Grid>\n          &nbsp;\n          <Grid container spacing={2}>\n              {skills?.map(item => {\n                return (\n                  <Grid item key={item}>\n                    <Card>\n                      <CardContent>\n                        {item}\n                        <IconButton onClick={() => {\n                          setSkills(skills.filter(sk => sk !== item))\n                        }}>\n                          <DeleteOutlineIcon />\n                        </IconButton>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )\n              })}\n          </Grid>\n          &nbsp;\n          <Grid item xs={12}>\n              <Autocomplete\n                freeSolo\n                name=\"skill\"\n                variant=\"outlined\"\n                fullWidth\n                options={[{title: \"Java\"}, {title: \"C++\"}, {title: \"Python\"},]}\n                getOptionLabel={(option) => option.title}\n                label=\"Skill\" \n                inputValue={skill|| ''}\n                onInputChange={(event, value)=>{\n                  setSkill(value)\n                }} \n                renderInput={(params) => <TextField {...params} label=\"Enter new skill\" variant=\"outlined\" />}\n              />\n            </Grid>\n          <Grid item xs={12}>\n          \n            <Button\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"primary\"\n            onClick={()=>{\n              if (!skills.filter(sk => sk === skill).length && skill !== \"\")\n                setSkills([...skills, skill])\n            }}\n          >\n          <span style={{color: \"white\"}}> Add Skills </span>\n          </Button>\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            color=\"secondary\"\n          >\n          <span style={{color: \"white\"}}> Save </span>\n          </Button>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </form>\n            </div>\n            </Grid>\n            <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n      </Snackbar>\n    </Grid> \n  );\n}\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/context/UserContext.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Profile.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Profile.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/NewJob.page.js",["138","139","140","141"],"import Profile from '../recruiter/NewJob.component'\nimport Navbar from '../recruiter/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"RecruiterProfile\">\n        <Navbar />\n        <Profile />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Dash.component.js",["142","143","144","145"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Dash() {\n  const classes = useStyles();\n  \n  const [jobs, setJobs] = useState([])\n  const [rating, setRating] = useState(3)\n  const [cjob, setCjob] = useState()\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([])\n\n  const {userData, setUserData } = useContext(UserContext);\n  const [open2, setOpen2] = useState(false)\n  const handleClose2 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen2(false);\n  };\n\n  const sendData = (async () => {\n    if(Number(rating)<0 || Number(rating)>5){\n      setOpen2(true)\n    }\n    else{\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob.applicants.filter(ap => ap.email === userData.user.email)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage+=1\n    console.log(tempApplicant)\n    let applicants = cjob.applicants.filter(ap => ap.email !== userData.user.email)\n    applicants = [...applicants, tempApplicant]\n    let nrating=cjob.nrating+1\n    let trating=Number(cjob.trating)+Number(rating)\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n    console.log(\"applicants\")\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants, nrating, trating}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n      }\n    }\n  }});\n\n\n\n  useEffect( () => {\n      const callData = (async () => {\n        let token = await localStorage.getItem(\"auth-token\")\n        const tokenRes = await Axios.post(\n            \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n        );\n        if (tokenRes.data) {\n          const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n            headers: {\"x-auth-token\": token}\n          });\n          const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n            headers: {\"x-auth-token\": token}\n          });\n          setJobs(jobsAll.data)\n          setUsers(usersAll.data)\n        }\n      });\n      callData()\n      \n      console.log(userData)\n  }, [])\n  const jobUser = () => jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData.user.email && ap.stage !== -1).length)\n  let newJobs = jobUser()\n  console.log(\"dfsahfasf\", newJobs)\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height: \"100%\"}}>\n        <div className={classes.paper}>\n          <h1>My Applications</h1>\n        </div>\n            <Grid container spacing={4}>\n              {newJobs?.map(job => {\n                let appVals = job.applicants.filter(ap => ap.email === userData.user.email)\n                appVals=appVals[0]\n                const handleClickOpen = () => {\n                    setCjob(job);\n                    setOpen(true);\n                };\n                const handleCloseAndSubmit = async () => {\n                    await sendData();\n                    setOpen(false);\n                };\n                const handleClose = () => {\n                    setOpen(false);\n                };\n                return (\n                  <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n                    <h4>{job.title}</h4>\n                    <Grid container spacing={1}>\n                     <Grid item xs={6}>\n                        Job Type: {job.jtype}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Company:&nbsp;\n                        {\n                          users?.filter(user => (user.email === job.remail)).map(  user => {\n                            return (\n                              <>\n                              {user.cname}\n                              </>\n                            )\n                          })\n                        }\n                     </Grid>\n                     <Grid item xs={6}>\n                        Salary:  {job.salary}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Skills : |&nbsp;{job.skills.join(\" | \" )} |\n                     </Grid>\n                     &nbsp;\n                     <br/>\n                     <Grid item xs={12} style={{alignItems: \"center\"}}>\n                      <h6>Status:&nbsp;\n                      {\n                        (appVals.stage < 2) ? (\n                          <a style={{\n                            color: \"white\",\n                            backgroundColor: '#f1356d',\n                            borderRadius: '8px'\n                          }}> \n                          &nbsp; Pending &nbsp;\n                          </a>\n                        ) : (\n                          <a style={{\n                            color: \"white\",\n                            backgroundColor: '#18de46',\n                            borderRadius: '8px'\n                          }}> \n                          &nbsp; Accepted &nbsp;\n                          </a> \n                        )\n                      }\n                      </h6>\n                     </Grid>\n                    </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                    {\n                      (appVals.stage===2) ? \n                      (\n                        <Button\n                        onClick={() => handleClickOpen()}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                        >\n                          <span style={{color: \"white\"}}> Rate Job</span>\n                        </Button>\n                      ) : (<></>)\n                    }\n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{job.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                          <h6>Rate your job!</h6>\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            type=\"number\"\n                            label=\"Rating (Out of 5 ★)\"\n                            fullWidth\n                            value={rating}\n                            onChange={(e) => setRating(e.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                    \n                </CardActions>\n\n                  </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open2} autoHideDuration={6000} onClose={handleClose2}>\n        <Alert onClose={handleClose2} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n    </Snackbar>\n    </Grid> \n  );\n}\n\n",["146","147"],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/applicant/Search.component.js",["148","149","150","151","152","153","154"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Dropdown } from 'react-bootstrap'\nimport Fuse from 'fuse.js';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Search() {\n  \n  const classes = useStyles();\n  \n  const [jobs, setJobs] = useState([])\n  const [sop, setSop] = useState(\"\")\n  const [cjob, setCjob] = useState({\"skills\": []})\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([])\n  const [open2, setOpen2] = useState(false);\n  const [soType, setSoType] = useState('Ascending')\n  const [sType, setSType] = useState('Salary')\n  const [dur, setDur] = useState('None')\n  const [salmax, setSalmax] = useState('')\n  const [salmin, setSalmin] = useState('')\n  const [jtype, setJtype] = useState('None')\n  const [open3, setOpen3] = useState(false)\n  const handleClose3 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen3(false);\n  };\n  const sortFunc =  (a, b) => {\n    const rc = (j) => {\n      if (j.nrating===0)\n        return 0;\n      else\n        return (j.trating/j.nrating) \n    }\n\n    if (sType === 'Salary'){\n      if (soType==='Ascending'){\n        return (a.salary - b.salary)\n      }else{\n        return (b.salary - a.salary)\n      }\n    }else if (sType ==='Duration'){\n      if (soType==='Ascending'){\n        return (a.duration - b.duration)\n      }else{\n        return (b.duration - a.duration)\n      }\n    }else{\n      if (soType==='Ascending'){\n        return (rc(a)-rc(b))\n      }else{\n        return (rc(b)-rc(a))\n      }\n    }\n  }\n  let foo = jobs\n  foo.sort(sortFunc)\n  if(dur != 'None'){\n    foo = foo.filter(jb => jb.duration < dur)\n  }\n  if (jtype != 'None'){\n    foo = foo.filter(jb => jb.jtype === jtype)\n  }\n  if (salmax != ''){\n    foo = foo.filter(jb => jb.salary <= salmax)\n  }\n  if (salmin != ''){\n    foo = foo.filter(jb => jb.salary >= salmin)\n  }\n  foo=foo.filter(jb => new Date(jb.dod).getTime() > new Date().getTime())\n\n  const handleClose2 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen2(false);\n  };\n\n  const {userData} = useContext(UserContext);\n\n  const sendData = (async () => {\n    if(sop.split(\" \").length >250){\n        setOpen3(true)\n    }\n    else{\n    let token = await localStorage.getItem(\"auth-token\")\n    const applicants = [...cjob.applicants, { sop, email: userData.user.email }]\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n    console.log(applicants)\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n        \n      }\n    }\n  }});\n\n  const filled = jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData?.user?.email && ap?.stage !== -1).length).length\n  console.log(\"Filled:\", filled)\n  const employed = jobs?.filter(job => job?.applicants?.filter( ap => ap.email === userData?.user?.email && ap?.stage >= 2).length).length\n  console.log(\"employed\", employed)\n\n  useEffect( () => {\n      const callData = (async () => {\n        let token = await localStorage.getItem(\"auth-token\")\n        const tokenRes = await Axios.post(\n            \"http://localhost:5000/user/tokenIsValid\", null , {headers: {\"x-auth-token\": token}}\n        );\n        if (tokenRes.data) {\n          const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n            headers: {\"x-auth-token\": token}\n          });\n          const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n            headers: {\"x-auth-token\": token}\n          });\n          setJobs(jobsAll.data)\n          setUsers(usersAll.data)\n\n        }\n      });\n      callData()\n      console.log(userData)\n  }, [])\n\n  const [query, setQuery] = useState('');\n  const fuse = new Fuse(foo, {\n    keys: [\n      'title'\n    ]\n  });\n  const results = fuse.search(query)\n  const fooResults = (query!='') ? results.map(jb => jb.item) : foo;\n  console.log(fooResults)\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height: \"100%\"}}>\n        <div className={classes.paper}>\n          <h1>\n            Search Jobs\n          </h1>\n        </div>\n            <Grid container spacing={4} >\n            <Grid item xs={12}>\n            <Card>\n                <CardActions style={{ backgroundColor: \"#5a1563\" }}>\n                </CardActions>\n            </Card>\n            <Grid container xs={12} style={{ backgroundColor: \"#5a1563\" }}>\n              <Grid item xs={2}>\n              <Grid container>\n              <Grid item xs={3}/>\n              <Grid item xs={9}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Sort by:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"warning\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"black\", display: \"inline\"}}>{sType}</h4>\n                          </Dropdown.Toggle>\n\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setSType('Salary'); }}>&nbsp; Salary &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSType('Duration');}}>&nbsp; Duration &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSType('Job Rating');}}>&nbsp; Job Rating &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                </Dropdown>\n              </Grid>\n              </Grid>\n              </Grid>\n              <Grid item xs={1}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Sort order:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"white\", display: \"inline\"}}>{soType}</h4>\n                          </Dropdown.Toggle>\n\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setSoType('Ascending');}}>&nbsp; Ascending &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSoType('Descending');}}>&nbsp; Descending &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                  </Dropdown>\n                  \n              </Grid>\n              <Grid item xs={1}>\n                <h1 style={{color:\"white\"}}>&nbsp; &nbsp; &nbsp; |</h1>\n              </Grid>\n              <Grid item xs={2}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Job Type:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"danger\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"white\", display: \"inline\"}}>{jtype}</h4>\n                          </Dropdown.Toggle>\n\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setJtype('None');}}>&nbsp; None &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setJtype('Full-Time');}}>&nbsp; Full-Time &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setJtype('Part-Time');}}>&nbsp; Part-Time &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setJtype('Work from Home');}}>&nbsp; Work from Home &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                  </Dropdown>    \n              </Grid>\n              <Grid item xs={1}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Duration:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"white\", display: \"inline\"}}>{dur}</h4>\n                          </Dropdown.Toggle>\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setDur('None');}}>&nbsp; None &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('1');}}>&nbsp; 1 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('2');}}>&nbsp; 2 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('3');}}>&nbsp; 3 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('4');}}>&nbsp; 4 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('5');}}>&nbsp; 5 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('6');}}>&nbsp; 6 &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setDur('7');}}>&nbsp; 7 &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                  </Dropdown>\n              </Grid>\n              <Grid item xs={1}>\n              <Grid container xs={12}>\n              <Grid item xs={12}>\n                <h5 style={{ color: \"white\", display: \"inline\"}}>Salary:</h5>\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                    name=\"title\"\n                    type=\"number\"\n                    fullWidth\n                    id=\"title\"\n                    label=\"&nbsp;&nbsp;Min\"\n                    style={{\n                      backgroundColor:\"white\",\n                    }}\n                    onChange={(e) => setSalmin(e.target.value)}\n                  />\n              </Grid>\n              <Grid item xs={6}>\n              <TextField\n                    name=\"title\"\n                    type=\"number\"\n                    fullWidth\n                    id=\"title\"\n                    label=\"&nbsp;&nbsp;Max\"\n                    style={{\n                      backgroundColor:\"white\",\n                    }}\n                    onChange={(e) => setSalmax(e.target.value)}\n                  />\n              </Grid>\n              </Grid>\n              </Grid>\n              <Grid item xs={1}>\n                <h1 style={{color:\"white\"}}>&nbsp; &nbsp; |</h1>\n              </Grid>\n              <Grid item xs={2}>\n              <Grid container xs={12}>\n              <Grid item xs={12}>\n                <h5 style={{ color: \"white\", display: \"inline\"}}>Search:</h5>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                    name=\"title\"\n                    fullWidth\n                    id=\"title\"\n                    label=\"&nbsp;&nbsp;Search\"\n                    style={{\n                      backgroundColor:\"white\",\n                    }}\n                    onChange={(e) => setQuery(e.target.value)}\n                  />\n              </Grid>\n              \n              </Grid>\n              </Grid>\n            </Grid>\n            <Card>\n                <CardActions style={{ backgroundColor: \"#5a1563\" }}>\n                </CardActions>\n            </Card>\n            </Grid>\n              {fooResults?.map(job => {\n                const handleClickOpen = () => {\n                    if (filled >= 10 || employed){\n                        setOpen2(true);\n                    }\n                    else{\n                    setCjob(job);\n                    setOpen(true);\n                    }\n                };\n                const handleCloseAndSubmit = async () => {\n                    await sendData();\n                    setOpen(false);\n                    setSop(\"\")\n                };\n                const handleClose = () => {\n                    setOpen(false);\n                };\n                let value = 0\n                if (job.nrating) value = (job.trating/job.nrating)\n\n                return (\n                  <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n                    \n                        <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                        <h4>{job.title}</h4>\n                        </Grid>\n                        <Grid item xs={6}>\n                            Rating : {value} ★\n                        </Grid>\n                    \n                     <Grid item xs={6}>\n                        Job Type: {job.jtype}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Company:&nbsp;\n                        {\n                          users?.filter(user => (user.email === job.remail)).map(  user => {\n                            return (\n                              <>\n                              {user.cname}\n                              </>\n                            )\n                          })\n                        }\n                     </Grid>\n                     <Grid item xs={6}>\n                        Salary:  $ {job.salary}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Skills : |&nbsp;{job.skills.join(\" | \" )} |\n                     </Grid>\n                     <Grid item xs={6}>\n                        Duration: {job.duration}\n                      </Grid>\n                     <Grid item xs={6}>\n                        Maximum Positions: {job.maxpos}\n                    </Grid>\n                     <Grid item xs={6}>\n                        Deadline: { (new Date(job.dod)).toLocaleString() }\n                     </Grid>\n                     <Grid item xs={6}>\n                        \n                     </Grid>\n                    </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                    {\n                      (!job.applicants.filter(ap => ap.email === userData.user.email).length) ? \n                      (\n                        (job.applicants.filter(ap => ap.stage != -1).length >= job.maxapp) ? \n                        (\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                className={classes.submit}\n                                color=\"\"\n                                >\n                                <span style={{color: \"red\"}}> Full </span>\n                            </Button>\n                        ) :\n                        (\n                            <Button\n                            onClick={handleClickOpen}\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submit}\n                            color=\"primary\"\n                            >\n                            <span style={{color: \"white\"}}> Apply </span>\n                            </Button>\n                        )\n                        \n\n                      ) : \n                      (\n                        <Button\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"secondary\"\n                        >\n                          <span style={{color: \"white\"}}> Applied </span>\n                        </Button>\n                      )\n                    }\n                    <Snackbar open={open2} autoHideDuration={6000} onClose={handleClose2}>\n                    {\n                      (employed) ? \n                      (\n                        <Alert onClose={handleClose2} severity=\"error\">\n                                    Already Employed in Job!\n                        </Alert>\n\n                      ) \n                      : \n                      (\n                        <Alert onClose={handleClose2} severity=\"error\">\n                                    Application limit exceeded!\n                        </Alert>\n                      )\n                    }\n                    </Snackbar>\n                    \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{cjob.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                        <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            Job Type: {cjob.jtype}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Company:&nbsp;\n                            {\n                            users?.filter(user => (user.email === cjob.remail)).map(  user => {\n                                return (\n                                <>\n                                {user.cname}\n                                </>\n                                )\n                            })\n                            }\n                        </Grid>\n                        <Grid item xs={6}>\n                            Salary:  $ {cjob.salary}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Skills : |&nbsp;{cjob.skills.join(\" | \" )} |\n                        </Grid>\n                        <Grid item xs={6}>\n                            Duration: {cjob.duration}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Maximum Positions: {cjob.maxpos}\n                        </Grid>\n                        <Grid item xs={6}>\n                            Deadline: { (new Date(cjob.dod)).toDateString() }\n                        </Grid>\n                        </Grid>\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            multiline\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Statement of Purpose\"\n                            fullWidth\n                            onChange={(e) => setSop(e.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                </CardActions>\n\n                  </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open3} autoHideDuration={6000} onClose={handleClose3}>\n        <Alert onClose={handleClose3} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n    </Snackbar>\n    </Grid> \n  );\n}\n\n","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Dash.page.js",["155","156","157","158"],"import Dash from '../applicant/Dash.component'\nimport Navbar from '../applicant/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"ApplicantProfile\">\n        <Navbar />\n        <Dash />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/a-pages/Search.page.js",["159","160","161","162"],"import Search from '../applicant/Search.component'\nimport Navbar from '../applicant/Navbar.component'\nimport { useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"ApplicantProfile\">\n        <Navbar />\n        <Search />\n    </div>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Dash.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Dash.component.js",["163","164","165","166","167","168","169"],"import { useState, useContext, useEffect } from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { Dropdown } from 'react-bootstrap'\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Dash() {\n  const classes = useStyles();\n\n  const [jobs, setJobs] = useState([])\n  const [cjob, setCjob] = useState({ \"skills\": [], \"applicants\": [] })\n  const [users, setUsers] = useState()\n  const [soType, setSoType] = useState('Ascending')\n  const [sType, setSType] = useState('Applicant Name')\n  const { userData, setUserData } = useContext(UserContext);\n\n  const [open, setOpen] = useState(false)\n  const [open2, setOpen2] = useState(false)\n  const [open3, setOpen3] = useState(false)\n  const [maxpos, setMaxpos] = useState()\n  const [maxapp, setMaxapp] = useState()\n  const [dod, setDod] = useState()\n\n  const handleClose3 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen3(false);\n  };\n\n  const sendData = (async () => {\n    let token = await localStorage.getItem(\"auth-token\")\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {maxpos, maxapp, dod}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n      }\n    }\n  });\n\n  const reject = (async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob?.applicants?.filter(ap => ap.email === email)\n    console.log(tempApplicant)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage = -1\n    console.log(tempApplicant)\n    let applicants = cjob?.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n      \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n    );\n    let temp = cjob\n    temp.applicants=applicants\n    if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob?._id}`, { applicants }, {\n        headers: { \"x-auth-token\": token }\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setCjob(temp)\n      }\n    }\n  });\n\n  const shortlist = (async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob?.applicants?.filter(ap => ap.email === email)\n    console.log(tempApplicant)\n    tempApplicant = tempApplicant[0]\n    tempApplicant.stage += 1\n    console.log(tempApplicant)\n    let applicants = cjob?.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    console.log(applicants)\n    const tokenRes = await Axios.post(\n      \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n    );\n    let temp = cjob\n    temp.applicants=applicants\n    if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, { applicants }, {\n        headers: { \"x-auth-token\": token }\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setCjob(temp)\n      }\n    }\n  });\n\n  const select = async (email) => {\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = cjob?.applicants.filter(ap => ap.email === email)\n    tempApplicant = tempApplicant[0]\n    let tempUs = users.filter(u=>u.email===tempApplicant.email)\n    tempUs=tempUs[0]\n    let fname = tempUs.fname\n    let lname = tempUs.lname \n    tempApplicant.stage+=1\n    tempApplicant.doa = new Date()\n    console.log(tempApplicant)\n    let cname = users.filter(u => u.email === userData.user.email)\n    cname=cname[0].cname\n    let applicants = cjob.applicants.filter(ap => ap.email !== email)\n    applicants = [...applicants, tempApplicant]\n    const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, {headers: {\"x-auth-token\": token}}\n    );\n      await jobs.map( async job => {\n        let updateApplicants = job.applicants.filter(ap => ap.email !== email)\n        console.log(\"update\", updateApplicants)\n        if (tokenRes.data) {\n          await Axios.post(`http://localhost:5000/job/update/${job._id}`, {applicants : updateApplicants}, {\n              headers: {\"x-auth-token\": token}\n          });}\n      }\n      )\n      if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${cjob._id}`, {applicants}, {\n          headers: {\"x-auth-token\": token}\n      });\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: {\"x-auth-token\": token}\n        });\n        setJobs(jobsAll.data)\n        setCjob(jobs.filter(job => job._id ===cjob._id))\n        setCjob(cjob[0])\n        if (tokenRes.data) {\n          Axios.post(\"http://localhost:5000/email/send\", {email: tempApplicant.email, fname, lname, job: cjob.title, cname},{\n            headers: {\"x-auth-token\": token}\n          });}\n      }\n    }\n  }\n\n  useEffect(() => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n      );\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setUsers(usersAll.data)\n      }\n    });\n    callData()\n    console.log(userData)\n  }, [])\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{ height: \"100vh\" }}>\n      <Grid container className={classes.image} >\n        <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{ height: \"100%\" }}>\n          <div className={classes.paper}>\n            <h1>My Jobs</h1>\n          </div>\n          <Grid container spacing={4}>\n            {jobs?.filter(job => job?.remail === userData?.user?.email).map(job => {\n              {/* const sortFunc =  (a, b) => {\n                const rc = (j) => {\n                  if (j.nrating===0)\n                    return 0;\n                  else\n                    return (j.trating/j.nrating) \n                }\n                const aname = a.fname + a.lname\n                const bname = b.fname + b.lname\n\n                if (sType === 'Applicant Name'){\n                  if (soType==='Ascending'){\n                    return (aname < bname)\n                  }else{\n                    return (bname < aname)\n                  }\n                }else if (sType ==='Duration'){\n                  if (soType==='Ascending'){\n                    return (a.duration - b.duration)\n                  }else{\n                    return (b.duration - a.duration)\n                  }\n                }else{\n                  if (soType==='Ascending'){\n                    return (rc(a)-rc(b))\n                  }else{\n                    return (rc(b)-rc(a))\n                  }\n                }\n              } */}\n              \n              const handleClickOpen = () => {\n                setCjob(job);\n                setOpen(true);\n              };\n\n              const handleClose = () => {\n                setOpen(false);\n              };\n\n              const handleClickOpen2 = () => {\n                setCjob(job);\n                setMaxpos(job.maxpos)\n                setMaxapp(job.maxapp)\n                setDod(job.dod)\n                console.log(\"dod\", job.dod)\n                setOpen2(true);\n              };\n\n              const handleClose2 = () => {\n                setOpen2(false);\n              };\n\n              const handleCloseAndSubmit = () => {\n                sendData()\n                handleClose2()\n              }\n\n              let value = 0\n              if (job.nrating) value = (job.trating / job.nrating)\n\n              return (\n                <Grid item xs={6} key={job._id}>\n                  <Card>\n                    <CardContent>\n\n                      <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                          <h4>{job.title}</h4>\n                        </Grid>\n                        <Grid item xs={6}>\n                          Rating : {value} ★\n                        </Grid>\n\n                        <Grid item xs={6}>\n                          Job Type: {job.jtype}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Salary:  $ {job.salary}\n                        </Grid>\n\n                        <Grid item xs={6}>\n                          Maximum Positions: {job.maxpos}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Maximum Applicants: {job.maxapp}\n                        </Grid>\n                        <Grid item xs={6}>\n                          Skills : |&nbsp;{job.skills.join(\" | \")} |\n                     </Grid>\n                        <Grid item xs={6}>\n                          Deadline: {(new Date(job.dod)).toLocaleString()}\n                        </Grid>\n                        <Grid item xs={6}>\n\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                    <CardActions>\n                      <Button\n                        onClick={handleClickOpen}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                      >\n                        <span style={{ color: \"white\" }}> View Applicants </span>\n                      </Button>\n                      <Button\n                        onClick={handleClickOpen2}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"secondary\"\n                      >\n                        <span style={{ color: \"white\" }}> Edit </span>\n                      </Button>\n                      <Dialog fullScreen open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" >\n                        <DialogContent style={{ backgroundColor: \"#152963\" }}>\n                          <DialogContentText>\n                            <div className={classes.paper}>\n                              <a style={{ color: \"white\" }}>Job Title:</a> <h1 style={{ color: \"white\" }}> {cjob?.title}</h1>\n                            </div>\n                            <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                            <Card>\n                              <CardActions />\n                            </Card>\n                            </Grid>\n                              {\n                                cjob?.applicants?.filter(ap => ap.stage != -1 && ap.stage < 2).map(ap => {\n                                \n                                let applicant = users.filter(user => user.email === ap.email)\n                                const forShortlist = () => {\n                                  shortlist(applicant.email)\n                                }\n                                const forReject = () => {\n                                  reject(applicant.email)\n                                }\n                                const forSelect = () => {\n                                  if (cjob?.applicants.filter(apl => apl.stage >=2).length >= cjob?.maxpos){\n                                    setOpen3(true)\n                                  }\n                                  else{\n                                    select(applicant.email)\n                                  }\n                                  \n                                }\n                                applicant = applicant[0]\n                                let value = 0\n                                if (applicant.nrating) value = (applicant.trating / applicant.nrating)\n                                return (\n                                  <Grid item xs={6}>\n                                    <Card>\n                                      <CardContent>\n                                        <Grid container xs={12}>\n                                          <Grid item xs={6}>\n                                            <h4 inline>{applicant.fname} {applicant.lname}</h4>\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Rating: {value} ★\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Skills : |&nbsp;{applicant.skills.join(\" | \")} |\n                                          </Grid>\n                                          <Grid item xs={6}>\n                                            Email : {applicant.email}\n                                          </Grid>\n                                          <Grid item xs={12}>\n                                          Date of application : {(new Date(ap.doa)).toDateString()}\n                                          </Grid>\n                                          <Grid item xs={12}>\n                                            Eduacation : <br /> &nbsp;\n                                          <Grid container spacing={2}>\n                                              {applicant.education.map(ed => {\n                                                let eyear = \"Present\"\n                                                if (ed.eyear != \"\") eyear = ed.eyear\n                                                return (\n                                                  <Grid item xs={6}>\n                                                    <Card>\n                                                      <CardContent>\n                                                        <Grid container spacing={2}>\n                                                          <Grid item xs={6}>\n                                                            <h5>{ed.institute}</h5>\n                                                          </Grid>\n                                                          <Grid item xs={6}>\n                                                            {ed.syear}-{eyear}\n                                                          </Grid>\n                                                        </Grid>\n                                                      </CardContent>\n                                                    </Card>\n                                                  </Grid>\n                                                )\n                                              })\n                                              }\n                                            </Grid>\n                                          </Grid>\n                                          <Grid item xs={12}>\n                                          Statement of purpose : {ap.sop}\n                                          </Grid>\n                                          \n                                        </Grid>\n                                      </CardContent>\n                                      <CardActions>\n                                        {\n                                          (ap.stage == 1) ?\n                                            (\n                                              <Button\n                                                onClick={forSelect}\n                                                fullWidth\n                                                variant=\"contained\"\n                                                className={classes.submit}\n                                                color=\"primary\"\n                                              >\n                                                <span style={{ color: \"white\" }}> Accept </span>\n                                              </Button>\n                                            ) :\n                                            (\n                                              <Button\n                                                onClick={forShortlist}\n                                                fullWidth\n                                                variant=\"contained\"\n                                                className={classes.submit}\n                                                color=\"\"\n                                              >\n                                                <span style={{ color: \"black\" }}> Shortlist </span>\n                                              </Button>\n                                            )}\n                                        <Button\n                                          onClick={forReject}\n                                          fullWidth\n                                          variant=\"contained\"\n                                          className={classes.submit}\n                                          color=\"secondary\"\n                                        >\n                                          <span style={{ color: \"white\" }}> Reject </span>\n                                        </Button>\n                                        <Snackbar open={open3} autoHideDuration={6000} onClose={handleClose3}>\n                                          <Alert onClose={handleClose3} severity=\"error\">\n                                                    Max positions filled!\n                                          </Alert>\n                                        </Snackbar>\n                                      </CardActions>\n                                    </Card>\n                                  </Grid>\n                                )\n                              })\n                              }\n                            </Grid>\n\n                            <Grid container spacing={2}>\n\n                            </Grid>\n                          </DialogContentText>\n                        </DialogContent>\n                        <DialogActions style={{ backgroundColor: \"#5a1563\" }}>\n                        <Grid container xs={10}>\n                          <Grid item xs={3}>\n                          <h4 style={{ color: \"white\", display: \"inline\"}}>Sort by:</h4>\n                          <Dropdown>\n                                      <Dropdown.Toggle variant=\"warning\" id=\"dropdown-basic\" size=\"sm\">\n                                          <h3 style={{ color: \"black\", display: \"inline\"}}>{sType}</h3>\n                                      </Dropdown.Toggle>\n\n                                      <Dropdown.Menu>\n                                          <Dropdown.Item onClick={()=>{setSType('Applicant Name')}}>&nbsp; Applicant Name &nbsp;</Dropdown.Item>\n                                          <Dropdown.Item onClick={()=>{setSType('Date of Application')}}>&nbsp; Date of Application &nbsp;</Dropdown.Item>\n                                          <Dropdown.Item onClick={()=>{setSType('Applicant Rating')}}>&nbsp; Applicant Rating &nbsp;</Dropdown.Item>\n                                      </Dropdown.Menu>\n                              </Dropdown>\n                              \n                          </Grid>\n                          <Grid item xs={3}>\n                          <h4 style={{ color: \"white\", display: \"inline\"}}>Sort order:</h4>\n                          <Dropdown>\n                                      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" size=\"sm\">\n                                          <h3 style={{ color: \"white\", display: \"inline\"}}>{soType}</h3>\n                                      </Dropdown.Toggle>\n\n                                      <Dropdown.Menu>\n                                          <Dropdown.Item onClick={()=>{setSoType('Ascending')}}>&nbsp; Ascending &nbsp;</Dropdown.Item>\n                                          <Dropdown.Item onClick={()=>{setSoType('Descending')}}>&nbsp; Descending &nbsp;</Dropdown.Item>\n                                      </Dropdown.Menu>\n                              </Dropdown>\n                              \n                          </Grid>\n                          <Grid item xs={3} />\n                          <Grid item xs={3}>\n\n                          </Grid>\n                        </Grid>\n                                \n                          <Button onClick={handleClose} color=\"secondary\">\n                            <span style={{ color: \"red\" }}> <h3 style={{\n                              color: \"white\",\n                              backgroundColor: 'red',\n                              borderRadius: '8px',\n                              textTransform: 'capitalize'\n                            }}>&nbsp; Close  &nbsp; </h3> </span>\n                          </Button>\n                        </DialogActions>\n                      </Dialog>\n                      <Dialog open={open2} onClose={handleClose2} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{cjob?.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                        \n                        </DialogContentText>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12} sm={6}>\n                              <TextField\n                                required\n                                name=\"maxapp\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                fullWidth\n                                id=\"maxapp\"\n                                label=\"Max Applicants\"\n                                value={maxapp}\n                                onChange={(e) => setMaxapp(e.target.value)}\n                              />\n                          </Grid>\n                          <Grid item xs={12} sm={6}>\n                              <TextField\n                                required\n                                variant=\"outlined\"\n                                type=\"number\"\n                                fullWidth\n                                id=\"maxpos\"\n                                label=\"Max Positions\"\n                                value={maxpos}\n                                name=\"maxpos\"\n                                onChange={(e) => setMaxpos(e.target.value)}\n                              />\n                          </Grid>\n                          <Grid item xs={12}>\n                          <TextField\n                            fullWidth\n                            id=\"date\"\n                            variant=\"outlined\"\n                            label=\"Deadline\"\n                            type=\"datetime-local\"\n                            className={classes.textField}\n                            defaultValue={job.dod.slice(0,10)}\n                            InputLabelProps={{\n                              shrink: true,\n                            }}\n                            onChange={(e) => setDod(e.target.value)}\n                          />\n                          </Grid>\n                        </Grid>\n                                      \n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Save\n                        </Button>\n                        <Button onClick={handleClose2} color=\"primary\">\n                            Cancel\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n\n\n                    </CardActions>\n                  </Card>\n                </Grid>\n              )\n            })}\n          </Grid>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7} />\n      </Grid>\n    </Grid>\n  );\n}","/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/r-pages/Emp.page.js",[],"/home/hrishi/GitHub/MERN-Job-Portal/frontend/src/components/recruiter/Emp.component.js",["170","171","172","173","174","175","176"],"import {useState, useContext, useEffect} from 'react';\nimport UserContext from \"../../context/UserContext\";\nimport { useHistory } from \"react-router-dom\"\nimport Axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport { Dropdown } from 'react-bootstrap'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n        Work-Way\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 40),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n export default  function Profile() {\n  const classes = useStyles();\n  const [users, setUsers] = useState()\n  const [list, setList] = useState([])\n  const [soType, setSoType] = useState('Ascending')\n  const [sType, setSType] = useState('Name')\n  const [rating, setRating] = useState(3)\n  const [open, setOpen] = useState(false);\n  const [citem, setCitem] = useState()\n\n  const [jobs, setJobs] = useState([])\n  const {userData, setUserData } = useContext(UserContext);\n  const [dataYet, setDataYet] = useState(false)\n  const [open2, setOpen2] = useState(false)\n  const handleClose2 = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen2(false);\n  };\n\n  const sendData = (async () => {\n    if(Number(rating)<0 || Number(rating)>5){\n      setOpen2(true)\n    }\n    else{\n    let token = await localStorage.getItem(\"auth-token\")\n    let tempApplicant = citem.job?.applicants?.filter(ap => ap.email === citem.emp.email)\n    tempApplicant=tempApplicant[0]\n    tempApplicant.rated = true\n    console.log(tempApplicant)\n    let applicants = citem.job.applicants.filter(ap => ap.email !== citem.emp.email)\n    applicants = [...applicants, tempApplicant]\n    console.log(applicants)\n    let nrating = citem.emp.nrating + 1;\n    let trating = Number(citem.emp.trating) + Number(rating);\n    let email = citem.emp.email\n    let content = {nrating, trating}\n    console.log(\"content\", content, \"applicants\", applicants, \"email\", email)\n    const tokenRes = await Axios.post(\n      \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n    );\n    if (tokenRes.data) {\n      await Axios.post(`http://localhost:5000/job/update/${citem.job._id}`, { applicants }, {\n        headers: { \"x-auth-token\": token }\n      });\n      await Axios.post(`http://localhost:5000/user/updater/${citem.emp.email}`, {nrating, trating }, {\n        headers: { \"x-auth-token\": token }\n      });\n      setRating(3)\n      setDataYet(false)\n    }\n  }});\n\n  const sortFunc =  (a, b) => {\n    console.log(\"inside\")\n\n    const rc = (j) => {\n      if (j.nrating===0)\n        return 0;\n      else\n        return (j.trating/j.nrating) \n    }\n\n    if (sType === 'Name'){\n      if (soType==='Ascending'){\n        return (((a.emp.fname+a.emp.lname) > (b.emp.fname+b.emp.lname)) ? (1) : (-1))\n      }else{\n        return (((a.emp.fname+a.emp.lname) < (b.emp.fname+b.emp.lname)) ? (1) : (-1))\n      }\n    }else if (sType ==='Job Title'){\n      if (soType==='Ascending'){\n        console.log(a.job.title > b.job.title)\n        return (((a.job.title > b.job.title)) ? (1) : (-1))\n      }else{\n        console.log(a.job.title < b.job.title)\n        return (((a.job.title < b.job.title)) ? (1) : (-1))\n      }\n    }else if (sType ==='Date of Joining'){\n      if (soType==='Ascending'){\n        return (((a.doj > b.doj)) ? (1) : (-1))\n      }else{\n        return (((a.doj < b.doj)) ? (1) : (-1))\n      }\n    }else{\n      if (soType==='Ascending'){\n        return (rc(a.emp)-rc(b.emp))\n      }else{\n        return (rc(b.emp)-rc(a.emp))\n      }\n    }\n  }\n\n  let foo = list\n  foo.sort(sortFunc)\n  console.log(foo)\n  \n\n  useEffect(() => {\n    const callData = (async () => {\n      let token = await localStorage.getItem(\"auth-token\")\n      const tokenRes = await Axios.post(\n        \"http://localhost:5000/user/tokenIsValid\", null, { headers: { \"x-auth-token\": token } }\n      );\n      if (tokenRes.data) {\n        const jobsAll = await Axios.get(\"http://localhost:5000/job/\", {\n          headers: { \"x-auth-token\": token }\n        });\n        const usersAll = await Axios.get(\"http://localhost:5000/user/every\", {\n          headers: { \"x-auth-token\": token }\n        });\n        setJobs(jobsAll.data)\n        setUsers(usersAll.data)\n        setDataYet(true)\n        console.log(\"callData\")\n      }\n  });\n  const makeList = (async () => {\n    let temp = []\n    const jobsFilter=jobs.filter(jb=>jb.remail == userData?.user.email)\n    jobsFilter.map(jb => {\n      const appFilter=jb.applicants.filter(ap=>ap.stage > 1)\n      appFilter.map(ap=>{\n        let cUser = users.filter(u => u.email === ap.email)\n        cUser=cUser[0]\n        let empl = {job: jb, emp: cUser, rated: ap.rated, doj: ap.doa}\n        temp = [...temp, empl]\n      })\n    })\n    console.log(\"makeList\", temp)\n    setList(temp)\n  })\n    \n  if (!dataYet){\n    callData()\n  }else{\n    makeList()\n  }\n    \n    console.log(userData)\n  }, [dataYet])\n\n  return (\n    <Grid container component=\"main\" className={classes.rooot} style={{height:\"100vh\"}}> \n    <Grid container className={classes.image} >\n      <CssBaseline />\n        <Grid item xs={false} sm={1} />\n        <Grid item xs={12} sm={10} md={10} component={Paper} elevation={6} square style={{height: \"100vh\"}}>\n        <div className={classes.paper}>\n          <h1>My Employees</h1>\n        </div>\n        <Grid container spacing={4} >\n            <Grid item xs={12}>\n            <Card>\n                <CardActions style={{ backgroundColor: \"#5a1563\" }}>\n                </CardActions>\n            </Card>\n            <Grid container xs={12} style={{ backgroundColor: \"#5a1563\" }}>\n              <Grid item xs={3}>\n              <Grid container>\n              <Grid item xs={3}/>\n              <Grid item xs={9}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Sort by:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"warning\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"black\", display: \"inline\"}}>{sType}</h4>\n                          </Dropdown.Toggle>\n\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setSType('Name'); }}>&nbsp; Name &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSType('Job Title');}}>&nbsp; Job Title &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSType('Date of Joining');}}>&nbsp; Date of Joining &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSType('Employee Rating');}}>&nbsp; Employee Rating &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                </Dropdown>\n              </Grid>\n              </Grid>\n              </Grid>\n              <Grid item xs={1}>\n              <h5 style={{ color: \"white\", display: \"inline\"}}>Sort order:</h5>\n              <Dropdown>\n                          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" size=\"sm\">\n                              <h4 style={{ color: \"white\", display: \"inline\"}}>{soType}</h4>\n                          </Dropdown.Toggle>\n\n                          <Dropdown.Menu>\n                              <Dropdown.Item onClick={()=>{setSoType('Ascending');}}>&nbsp; Ascending &nbsp;</Dropdown.Item>\n                              <Dropdown.Item onClick={()=>{setSoType('Descending');}}>&nbsp; Descending &nbsp;</Dropdown.Item>\n                          </Dropdown.Menu>\n                  </Dropdown>\n                  \n              </Grid>\n            </Grid>\n            <Card>\n                <CardActions style={{ backgroundColor: \"#5a1563\" }}>\n                </CardActions>\n            </Card>\n            </Grid>\n            <Grid item xs={12}>\n            <Grid container spacing={4}>\n              {foo?.map(item => {\n                const handleClickOpen = () => {\n                    setCitem(item);\n                    setOpen(true);\n                };\n                const handleCloseAndSubmit = async () => {\n                    await sendData();\n                    setOpen(false);\n                };\n                const handleClose = () => {\n                    setOpen(false);\n                    setRating(3);\n                };\n                let value = 0\n                if (item.emp.nrating) value=(item.emp.trating/item.emp.nrating)\n                return (\n                  <Grid item xs={6} key={JSON.stringify(item)}>\n                  <Card>\n                    <CardContent>\n                    \n                    <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                    <h4>{item.emp.fname} {item.emp.lname}</h4>\n                    </Grid>\n                    <Grid item xs={6}>\n                            Rating : {value} ★\n                    </Grid>\n                    <Grid item xs={6}>\n                      Job Title: {item?.job?.title}\n                    </Grid>\n                     <Grid item xs={6}>\n                        Job Type: {item.job.jtype}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Salary: $ {item?.job?.salary}\n                     </Grid>\n                     <Grid item xs={6}>\n                        Skills : |&nbsp;{item.emp?.skills?.join(\" | \" )} |\n                     </Grid>\n                     <Grid item xs={12}>\n                        Date of Joining : {new Date(item.doj).toDateString()}\n                     </Grid>\n                    </Grid>\n                    </CardContent>\n                    <CardActions>\n                    {\n                      (item.rated===false) ? \n                      (\n                        <Button\n                        onClick={() => handleClickOpen()}\n                        fullWidth\n                        variant=\"contained\"\n                        className={classes.submit}\n                        color=\"primary\"\n                        >\n                          <span style={{color: \"white\"}}> Rate Employee</span>\n                        </Button>\n                      ) : (<></>)\n                    }\n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">{citem?.emp.fname} {citem?.emp.lname}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText>\n                          <h6>Rate your job!</h6>\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            type=\"number\"\n                            label=\"Rating (Out of 5 ★)\"\n                            fullWidth\n                            value={rating}\n                            onChange={(e) => setRating(e.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleCloseAndSubmit} color=\"primary\">\n                            Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                    </CardActions>\n                  </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n            </Grid>\n            </Grid>\n        <Box mt={5}>\n              <Copyright />\n          </Box>\n        </Grid>\n        <Grid item xs={false} sm={1} md={7}/>\n    </Grid>\n    <Snackbar open={open2} autoHideDuration={6000} onClose={handleClose2}>\n        <Alert onClose={handleClose2} severity=\"error\">\n          Please Check Values Entered!\n        </Alert>\n      </Snackbar>\n    </Grid> \n  );\n}",{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":36,"column":34,"nodeType":"183","endLine":39,"endColumn":12},{"ruleId":"184","severity":1,"message":"185","line":74,"column":10,"nodeType":"186","messageId":"187","endLine":74,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":82,"column":10,"nodeType":"186","messageId":"187","endLine":82,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":32,"column":17,"nodeType":"190","endLine":36,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":32,"column":17,"nodeType":"190","endLine":36,"endColumn":20},{"ruleId":"184","severity":1,"message":"191","line":97,"column":20,"nodeType":"186","messageId":"187","endLine":97,"endColumn":31},{"ruleId":"192","severity":1,"message":"193","line":219,"column":31,"nodeType":"194","messageId":"195","endLine":219,"endColumn":33},{"ruleId":"192","severity":1,"message":"193","line":275,"column":36,"nodeType":"194","messageId":"195","endLine":275,"endColumn":38},{"ruleId":"192","severity":1,"message":"193","line":279,"column":129,"nodeType":"194","messageId":"195","endLine":279,"endColumn":131},{"ruleId":"184","severity":1,"message":"191","line":82,"column":20,"nodeType":"186","messageId":"187","endLine":82,"endColumn":31},{"ruleId":"181","severity":1,"message":"196","line":101,"column":5,"nodeType":"197","endLine":101,"endColumn":7,"suggestions":"198"},{"ruleId":"184","severity":1,"message":"185","line":97,"column":10,"nodeType":"186","messageId":"187","endLine":97,"endColumn":18},{"ruleId":"184","severity":1,"message":"191","line":97,"column":20,"nodeType":"186","messageId":"187","endLine":97,"endColumn":31},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"184","severity":1,"message":"200","line":3,"column":22,"nodeType":"186","messageId":"187","endLine":3,"endColumn":31},{"ruleId":"184","severity":1,"message":"201","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"202","line":5,"column":10,"nodeType":"186","messageId":"187","endLine":5,"endColumn":20},{"ruleId":"184","severity":1,"message":"191","line":83,"column":20,"nodeType":"186","messageId":"187","endLine":83,"endColumn":31},{"ruleId":"181","severity":1,"message":"196","line":146,"column":6,"nodeType":"197","endLine":146,"endColumn":8,"suggestions":"203"},{"ruleId":"188","severity":1,"message":"189","line":207,"column":27,"nodeType":"190","endLine":211,"endColumn":30},{"ruleId":"188","severity":1,"message":"189","line":215,"column":27,"nodeType":"190","endLine":219,"endColumn":30},{"ruleId":"177","replacedBy":"204"},{"ruleId":"179","replacedBy":"205"},{"ruleId":"192","severity":1,"message":"193","line":131,"column":10,"nodeType":"194","messageId":"195","endLine":131,"endColumn":12},{"ruleId":"192","severity":1,"message":"193","line":134,"column":13,"nodeType":"194","messageId":"195","endLine":134,"endColumn":15},{"ruleId":"192","severity":1,"message":"193","line":137,"column":14,"nodeType":"194","messageId":"195","endLine":137,"endColumn":16},{"ruleId":"192","severity":1,"message":"193","line":140,"column":14,"nodeType":"194","messageId":"195","endLine":140,"endColumn":16},{"ruleId":"181","severity":1,"message":"196","line":205,"column":6,"nodeType":"197","endLine":205,"endColumn":8,"suggestions":"206"},{"ruleId":"192","severity":1,"message":"193","line":214,"column":28,"nodeType":"194","messageId":"195","endLine":214,"endColumn":30},{"ruleId":"192","severity":1,"message":"193","line":440,"column":63,"nodeType":"194","messageId":"195","endLine":440,"endColumn":65},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"184","severity":1,"message":"200","line":3,"column":22,"nodeType":"186","messageId":"187","endLine":3,"endColumn":31},{"ruleId":"184","severity":1,"message":"201","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"202","line":5,"column":10,"nodeType":"186","messageId":"187","endLine":5,"endColumn":20},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"184","severity":1,"message":"200","line":3,"column":22,"nodeType":"186","messageId":"187","endLine":3,"endColumn":31},{"ruleId":"184","severity":1,"message":"201","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"202","line":5,"column":10,"nodeType":"186","messageId":"187","endLine":5,"endColumn":20},{"ruleId":"184","severity":1,"message":"191","line":82,"column":21,"nodeType":"186","messageId":"187","endLine":82,"endColumn":32},{"ruleId":"181","severity":1,"message":"196","line":240,"column":6,"nodeType":"197","endLine":240,"endColumn":8,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":253,"column":15,"nodeType":"210","messageId":"211","endLine":282,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":374,"column":31,"nodeType":"190","endLine":374,"endColumn":61},{"ruleId":"192","severity":1,"message":"193","line":383,"column":73,"nodeType":"194","messageId":"195","endLine":383,"endColumn":75},{"ruleId":"192","severity":1,"message":"193","line":429,"column":62,"nodeType":"194","messageId":"195","endLine":429,"endColumn":64},{"ruleId":"192","severity":1,"message":"212","line":458,"column":53,"nodeType":"194","messageId":"195","endLine":458,"endColumn":55},{"ruleId":"184","severity":1,"message":"202","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"184","severity":1,"message":"213","line":5,"column":8,"nodeType":"186","messageId":"187","endLine":5,"endColumn":14},{"ruleId":"184","severity":1,"message":"191","line":88,"column":20,"nodeType":"186","messageId":"187","endLine":88,"endColumn":31},{"ruleId":"192","severity":1,"message":"212","line":196,"column":48,"nodeType":"194","messageId":"195","endLine":196,"endColumn":50},{"ruleId":"214","severity":1,"message":"215","line":197,"column":23,"nodeType":"216","messageId":"217","endLine":197,"endColumn":25},{"ruleId":"214","severity":1,"message":"215","line":199,"column":23,"nodeType":"216","messageId":"217","endLine":199,"endColumn":25},{"ruleId":"181","severity":1,"message":"218","line":217,"column":6,"nodeType":"197","endLine":217,"endColumn":15,"suggestions":"219"},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"react-hooks/exhaustive-deps","Assignments to the 'userData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","no-unused-vars","'userData' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setUserData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'useContext' is defined but never used.","'useEffect' is defined but never used.","'UserContext' is defined but never used.","'useHistory' is defined but never used.",["223"],["220"],["221"],["224"],["225"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '===' and instead saw '=='.","'Avatar' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'jobs', 'userData', and 'users'. Either include them or remove the dependency array.",["226"],"no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},{"desc":"227","fix":"230"},{"desc":"227","fix":"231"},{"desc":"232","fix":"233"},"Update the dependencies array to be: [userData]",{"range":"234","text":"235"},{"range":"236","text":"235"},{"range":"237","text":"235"},{"range":"238","text":"235"},"Update the dependencies array to be: [dataYet, jobs, userData, users]",{"range":"239","text":"240"},[3139,3141],"[userData]",[4775,4777],[6288,6290],[8388,8390],[6943,6952],"[dataYet, jobs, userData, users]"]